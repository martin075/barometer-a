
barometer-a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00001836  000018ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001836  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800170  00800170  0000193a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000193a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00001996  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000114d  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d7  00000000  00000000  00002b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000413  00000000  00000000  0000323a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000258  00000000  00000000  00003650  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  000038a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010ff  00000000  00000000  00003c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00004d03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <bmpComputePressureAndTemperature+0x2e4>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d4 e0       	ldi	r29, 0x04	; 4
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	11 e0       	ldi	r17, 0x01	; 1
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	e6 e3       	ldi	r30, 0x36	; 54
      fe:	f8 e1       	ldi	r31, 0x18	; 24
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a0 37       	cpi	r26, 0x70	; 112
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	a0 e7       	ldi	r26, 0x70	; 112
     110:	b1 e0       	ldi	r27, 0x01	; 1
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	ac 38       	cpi	r26, 0x8C	; 140
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <main>
     120:	0c 94 19 0c 	jmp	0x1832	; 0x1832 <_exit>

00000124 <__bad_interrupt>:
     124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <uartPutChar>:
        c++;
    }
}

int uartPutChar(char c, FILE *stream)
{
     128:	cf 93       	push	r28
     12a:	c8 2f       	mov	r28, r24
    if (c == '\n')
     12c:	8a 30       	cpi	r24, 0x0A	; 10
     12e:	19 f4       	brne	.+6      	; 0x136 <uartPutChar+0xe>
    {
        uartPutChar('\r', stream);
     130:	8d e0       	ldi	r24, 0x0D	; 13
     132:	0e 94 94 00 	call	0x128	; 0x128 <uartPutChar>
    }
    
    // Wait until able to send
    while (!(UCSR0A & (1 << UDRE0)))
     136:	80 91 c0 00 	lds	r24, 0x00C0
     13a:	85 ff       	sbrs	r24, 5
     13c:	fc cf       	rjmp	.-8      	; 0x136 <uartPutChar+0xe>
    {
        ;
    }
    
    UDR0 = c;
     13e:	c0 93 c6 00 	sts	0x00C6, r28
    
    return 0;
}
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	cf 91       	pop	r28
     148:	08 95       	ret

0000014a <uartSetup>:
static FILE stdoutUart = FDEV_SETUP_STREAM(uartPutChar, NULL, _FDEV_SETUP_WRITE);

void uartSetup(void)
{
    // Set baud rate
    UBRR0H = (BRC >> 8);
     14a:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = BRC;
     14e:	89 e1       	ldi	r24, 0x19	; 25
     150:	80 93 c4 00 	sts	0x00C4, r24
    
    // Enable the USART Receiver and Transmitter
    UCSR0B |= (1 << RXEN0);
     154:	e1 ec       	ldi	r30, 0xC1	; 193
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 61       	ori	r24, 0x10	; 16
     15c:	80 83       	st	Z, r24
    UCSR0B |= (1 << TXEN0);
     15e:	80 81       	ld	r24, Z
     160:	88 60       	ori	r24, 0x08	; 8
     162:	80 83       	st	Z, r24
    //UCSR0B |= (1 << RXCIE0);
    //UCSR0B |= (1 << TXCIE0);
    
    // Set the Character Size to 8 bits. There is one stop bit, which is
    // the default setting.
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     164:	e2 ec       	ldi	r30, 0xC2	; 194
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	86 60       	ori	r24, 0x06	; 6
     16c:	80 83       	st	Z, r24
    
    stdout = &stdoutUart;
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	90 93 89 01 	sts	0x0189, r25
     176:	80 93 88 01 	sts	0x0188, r24
     17a:	08 95       	ret

0000017c <uartSendChar>:
}

void uartSendChar(unsigned char c)
{
    // Wait until able to send
    while (!(UCSR0A & (1 << UDRE0)))
     17c:	90 91 c0 00 	lds	r25, 0x00C0
     180:	95 ff       	sbrs	r25, 5
     182:	fc cf       	rjmp	.-8      	; 0x17c <uartSendChar>
    {
        ;
    }
    
    // Send character
    UDR0 = c;
     184:	80 93 c6 00 	sts	0x00C6, r24
     188:	08 95       	ret

0000018a <uartSendString>:
}

void uartSendString (char *c)
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	ec 01       	movw	r28, r24
    // While *s != '\0'
    while (*c)
     190:	89 91       	ld	r24, Y+
     192:	88 23       	and	r24, r24
     194:	19 f0       	breq	.+6      	; 0x19c <uartSendString+0x12>
    {
        uartSendChar(*c);
     196:	0e 94 be 00 	call	0x17c	; 0x17c <uartSendChar>
     19a:	fa cf       	rjmp	.-12     	; 0x190 <uartSendString+0x6>
        c++;
    }
}
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	08 95       	ret

000001a2 <i2cSetup>:
    // TWPS1    TWPS0   Prescalar Value
    //     0        0                 1
    //     0        1                 4
    //     1        0                16
    //     1        1                64
    TWSR = ((0 << TWPS1) | (0 << TWPS0));
     1a2:	10 92 b9 00 	sts	0x00B9, r1
    
    // Set the frequency of the Serial Clock Line to 200 kHz
    //
    // F_SCL = F_CPU / (16 + 2 * TWBR * (Prescalar Value))
    
    TWBR = 32;
     1a6:	80 e2       	ldi	r24, 0x20	; 32
     1a8:	80 93 b8 00 	sts	0x00B8, r24
     1ac:	08 95       	ret

000001ae <i2cStart>:
}

void i2cStart(void)
{
    // Send start condition
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     1ae:	84 ea       	ldi	r24, 0xA4	; 164
     1b0:	80 93 bc 00 	sts	0x00BC, r24
     1b4:	08 95       	ret

000001b6 <i2cStop>:
{
    uint8_t i = 0; // Time out variable
    uint8_t errorCode = 0;
    
    // Transmit stop condition
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     1b6:	84 e9       	ldi	r24, 0x94	; 148
     1b8:	80 93 bc 00 	sts	0x00BC, r24
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
}

uint8_t i2cStop(void)
{
    uint8_t i = 0; // Time out variable
     1bc:	80 e0       	ldi	r24, 0x00	; 0
    
    // Transmit stop condition
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);

    // Wait until stop condition is executed and bus released
    while ((TWCR & (1 << TWSTO)) && (i < 90))
     1be:	90 91 bc 00 	lds	r25, 0x00BC
     1c2:	94 ff       	sbrs	r25, 4
     1c4:	08 c0       	rjmp	.+16     	; 0x1d6 <i2cStop+0x20>
     1c6:	8a 35       	cpi	r24, 0x5A	; 90
     1c8:	41 f0       	breq	.+16     	; 0x1da <i2cStop+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ca:	92 e0       	ldi	r25, 0x02	; 2
     1cc:	9a 95       	dec	r25
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <i2cStop+0x16>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <i2cStop+0x1c>
    {
        _delay_us(1);
        i++;
     1d2:	8f 5f       	subi	r24, 0xFF	; 255
     1d4:	f4 cf       	rjmp	.-24     	; 0x1be <i2cStop+0x8>
    }
    
    if (i > 89)
     1d6:	8a 35       	cpi	r24, 0x5A	; 90
     1d8:	31 f4       	brne	.+12     	; 0x1e6 <i2cStop+0x30>
     1da:	82 e0       	ldi	r24, 0x02	; 2
     1dc:	8a 95       	dec	r24
     1de:	f1 f7       	brne	.-4      	; 0x1dc <i2cStop+0x26>
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <i2cStop+0x2c>
    {
        _delay_us(1);
        errorCode = 100;
     1e2:	84 e6       	ldi	r24, 0x64	; 100
     1e4:	08 95       	ret
}

uint8_t i2cStop(void)
{
    uint8_t i = 0; // Time out variable
    uint8_t errorCode = 0;
     1e6:	80 e0       	ldi	r24, 0x00	; 0
        _delay_us(1);
        errorCode = 100;
    }
    
    return errorCode;
}
     1e8:	08 95       	ret

000001ea <i2cSendByte>:

void i2cSendByte(uint8_t data)
{
    // Save data to the TWDR
    TWDR = data;
     1ea:	80 93 bb 00 	sts	0x00BB, r24
    
    // Begin send
    TWCR = (1 << TWINT) | (1 << TWEN);
     1ee:	84 e8       	ldi	r24, 0x84	; 132
     1f0:	80 93 bc 00 	sts	0x00BC, r24
     1f4:	08 95       	ret

000001f6 <i2cReadByteACK>:
}

void i2cReadByteACK(void)
{
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     1f6:	84 ec       	ldi	r24, 0xC4	; 196
     1f8:	80 93 bc 00 	sts	0x00BC, r24
     1fc:	08 95       	ret

000001fe <i2cReadByteNOACK>:
}

void i2cReadByteNOACK(void)
{
    TWCR = (1 << TWINT) | (1 << TWEN);
     1fe:	84 e8       	ldi	r24, 0x84	; 132
     200:	80 93 bc 00 	sts	0x00BC, r24
     204:	08 95       	ret

00000206 <i2cWaitForComplete>:
}

uint8_t i2cWaitForComplete(void)
{
    uint8_t i = 0; // Time out variable
     206:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t errorCode = 0;

    // Wait for the i2c interface to complete the operation
    while ((!(TWCR & (1 << TWINT))) && (i < 90))
     208:	90 91 bc 00 	lds	r25, 0x00BC
     20c:	97 fd       	sbrc	r25, 7
     20e:	08 c0       	rjmp	.+16     	; 0x220 <i2cWaitForComplete+0x1a>
     210:	8a 35       	cpi	r24, 0x5A	; 90
     212:	41 f0       	breq	.+16     	; 0x224 <i2cWaitForComplete+0x1e>
     214:	92 e0       	ldi	r25, 0x02	; 2
     216:	9a 95       	dec	r25
     218:	f1 f7       	brne	.-4      	; 0x216 <i2cWaitForComplete+0x10>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <i2cWaitForComplete+0x16>
    {
        _delay_us(1);
        i++;
     21c:	8f 5f       	subi	r24, 0xFF	; 255
     21e:	f4 cf       	rjmp	.-24     	; 0x208 <i2cWaitForComplete+0x2>
    }
    
    if (i > 89)
     220:	8a 35       	cpi	r24, 0x5A	; 90
     222:	31 f4       	brne	.+12     	; 0x230 <i2cWaitForComplete+0x2a>
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	8a 95       	dec	r24
     228:	f1 f7       	brne	.-4      	; 0x226 <i2cWaitForComplete+0x20>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <i2cWaitForComplete+0x26>
    {
        _delay_us(1);
        errorCode = 100;
     22c:	84 e6       	ldi	r24, 0x64	; 100
     22e:	08 95       	ret
}

uint8_t i2cWaitForComplete(void)
{
    uint8_t i = 0; // Time out variable
    uint8_t errorCode = 0;
     230:	80 e0       	ldi	r24, 0x00	; 0
        _delay_us(1);
        errorCode = 100;
    }
    
    return errorCode;
}
     232:	08 95       	ret

00000234 <i2cGetReceivedByte>:

uint8_t i2cGetReceivedByte(void)
{
    return (uint8_t) TWDR;
     234:	80 91 bb 00 	lds	r24, 0x00BB
}
     238:	08 95       	ret

0000023a <i2cCheckReturnCode>:

uint8_t i2cCheckReturnCode(uint8_t expectedErrorCode)
{
    uint8_t errorCode = 0;
    
    if ((TWSR & 0xF8) != expectedErrorCode)
     23a:	20 91 b9 00 	lds	r18, 0x00B9
     23e:	28 7f       	andi	r18, 0xF8	; 248
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	28 17       	cp	r18, r24
     246:	39 07       	cpc	r19, r25
     248:	11 f4       	brne	.+4      	; 0x24e <i2cCheckReturnCode+0x14>
    return (uint8_t) TWDR;
}

uint8_t i2cCheckReturnCode(uint8_t expectedErrorCode)
{
    uint8_t errorCode = 0;
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	08 95       	ret
    
    if ((TWSR & 0xF8) != expectedErrorCode)
    {
        errorCode = 10;
     24e:	8a e0       	ldi	r24, 0x0A	; 10
    }
        
    return errorCode;
}
     250:	08 95       	ret

00000252 <bmpReadShort>:
        calibrationSigned[7] = bmpReadShort(0xBE, errorcode); // md
    }
}

uint16_t bmpReadShort(uint8_t address, uint8_t* errorCode)
{
     252:	ef 92       	push	r14
     254:	ff 92       	push	r15
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	18 2f       	mov	r17, r24
     260:	eb 01       	movw	r28, r22
    uint16_t msb = 0;
    uint16_t lsb = 0;
    uint16_t data;
    
    // Send a start condition (set TWSTA)
    i2cStart();
     262:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2cStart>
    *errorCode = i2cWaitForComplete();
     266:	0e 94 03 01 	call	0x206	; 0x206 <i2cWaitForComplete>
     26a:	88 83       	st	Y, r24
    
    if (*errorCode == 0)
     26c:	81 11       	cpse	r24, r1
     26e:	04 c0       	rjmp	.+8      	; 0x278 <bmpReadShort+0x26>
    {
        *errorCode = i2cCheckReturnCode(TW_START);
     270:	88 e0       	ldi	r24, 0x08	; 8
     272:	0e 94 1d 01 	call	0x23a	; 0x23a <i2cCheckReturnCode>
     276:	88 83       	st	Y, r24
    }
    //printf("Error code: %d\n", errorCode);

    // Tell slave to go in receive mode
    if (*errorCode == 0)
     278:	88 81       	ld	r24, Y
     27a:	81 11       	cpse	r24, r1
     27c:	06 c0       	rjmp	.+12     	; 0x28a <bmpReadShort+0x38>
    {
        i2cSendByte(BMP085_W); // write 0xEE
     27e:	8e ee       	ldi	r24, 0xEE	; 238
     280:	0e 94 f5 00 	call	0x1ea	; 0x1ea <i2cSendByte>
        *errorCode = i2cWaitForComplete();
     284:	0e 94 03 01 	call	0x206	; 0x206 <i2cWaitForComplete>
     288:	88 83       	st	Y, r24
    }
    
    // ACKS
    if (*errorCode == 0)
     28a:	88 81       	ld	r24, Y
     28c:	81 11       	cpse	r24, r1
     28e:	04 c0       	rjmp	.+8      	; 0x298 <bmpReadShort+0x46>
    {
        *errorCode = i2cCheckReturnCode(TW_MT_SLA_ACK);
     290:	88 e1       	ldi	r24, 0x18	; 24
     292:	0e 94 1d 01 	call	0x23a	; 0x23a <i2cCheckReturnCode>
     296:	88 83       	st	Y, r24
    }
    //printf("Error code: %d\n", errorCode);
    
    // Send read address to slave
    if (*errorCode == 0)
     298:	88 81       	ld	r24, Y
     29a:	81 11       	cpse	r24, r1
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <bmpReadShort+0x58>
    {
        i2cSendByte(address); // write register address
     29e:	81 2f       	mov	r24, r17
     2a0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <i2cSendByte>
        *errorCode = i2cWaitForComplete();
     2a4:	0e 94 03 01 	call	0x206	; 0x206 <i2cWaitForComplete>
     2a8:	88 83       	st	Y, r24
    }
    // ACKS
    if (*errorCode == 0)
     2aa:	88 81       	ld	r24, Y
     2ac:	81 11       	cpse	r24, r1
     2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <bmpReadShort+0x66>
    {
        *errorCode = i2cCheckReturnCode(TW_MT_DATA_ACK);
     2b0:	88 e2       	ldi	r24, 0x28	; 40
     2b2:	0e 94 1d 01 	call	0x23a	; 0x23a <i2cCheckReturnCode>
     2b6:	88 83       	st	Y, r24
    }
    //printf("Error code: %d\n", errorCode);
    
    // Send Restart to Slave
    if (*errorCode == 0)
     2b8:	88 81       	ld	r24, Y
     2ba:	81 11       	cpse	r24, r1
     2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <bmpReadShort+0x76>
    {
        i2cStart();
     2be:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2cStart>
        *errorCode = i2cWaitForComplete();
     2c2:	0e 94 03 01 	call	0x206	; 0x206 <i2cWaitForComplete>
     2c6:	88 83       	st	Y, r24
    }
    
    if (*errorCode == 0)
     2c8:	88 81       	ld	r24, Y
     2ca:	81 11       	cpse	r24, r1
     2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <bmpReadShort+0x84>
    {
        *errorCode = i2cCheckReturnCode(TW_REP_START);
     2ce:	80 e1       	ldi	r24, 0x10	; 16
     2d0:	0e 94 1d 01 	call	0x23a	; 0x23a <i2cCheckReturnCode>
     2d4:	88 83       	st	Y, r24
    }
    //printf("Error code: %d\n", errorCode);

    // Tell slave to go in send mode
    if (*errorCode == 0)
     2d6:	88 81       	ld	r24, Y
     2d8:	81 11       	cpse	r24, r1
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <bmpReadShort+0x96>
    {
        i2cSendByte(BMP085_R); // read 0xEF
     2dc:	8f ee       	ldi	r24, 0xEF	; 239
     2de:	0e 94 f5 00 	call	0x1ea	; 0x1ea <i2cSendByte>
        *errorCode = i2cWaitForComplete();
     2e2:	0e 94 03 01 	call	0x206	; 0x206 <i2cWaitForComplete>
     2e6:	88 83       	st	Y, r24
    }
    
    // ACKS
    if (*errorCode == 0)
     2e8:	88 81       	ld	r24, Y
     2ea:	81 11       	cpse	r24, r1
     2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <bmpReadShort+0xa4>
    {
        *errorCode = i2cCheckReturnCode(TW_MR_SLA_ACK);
     2ee:	80 e4       	ldi	r24, 0x40	; 64
     2f0:	0e 94 1d 01 	call	0x23a	; 0x23a <i2cCheckReturnCode>
     2f4:	88 83       	st	Y, r24
    }
    //printf("Error code: %d\n", errorCode);

    //Get MSB from Salve
    if (*errorCode == 0)
     2f6:	88 81       	ld	r24, Y
     2f8:	81 11       	cpse	r24, r1
     2fa:	05 c0       	rjmp	.+10     	; 0x306 <bmpReadShort+0xb4>
    {
        i2cReadByteACK();
     2fc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <i2cReadByteACK>
        *errorCode=i2cWaitForComplete();
     300:	0e 94 03 01 	call	0x206	; 0x206 <i2cWaitForComplete>
     304:	88 83       	st	Y, r24
    }
    //printf("Error code: %d\n", errorCode);
    
    if (*errorCode == 0)
     306:	88 81       	ld	r24, Y
     308:	81 11       	cpse	r24, r1
     30a:	08 c0       	rjmp	.+16     	; 0x31c <bmpReadShort+0xca>
    {
        msb = i2cGetReceivedByte(); // Get MSB result
     30c:	0e 94 1a 01 	call	0x234	; 0x234 <i2cGetReceivedByte>
     310:	e8 2e       	mov	r14, r24
     312:	f1 2c       	mov	r15, r1
        *errorCode = i2cWaitForComplete();
     314:	0e 94 03 01 	call	0x206	; 0x206 <i2cWaitForComplete>
     318:	88 83       	st	Y, r24
     31a:	02 c0       	rjmp	.+4      	; 0x320 <bmpReadShort+0xce>
    }
}

uint16_t bmpReadShort(uint8_t address, uint8_t* errorCode)
{
    uint16_t msb = 0;
     31c:	e1 2c       	mov	r14, r1
     31e:	f1 2c       	mov	r15, r1
        msb = i2cGetReceivedByte(); // Get MSB result
        *errorCode = i2cWaitForComplete();
    }
    
    // ACKM
    if (*errorCode == 0)
     320:	88 81       	ld	r24, Y
     322:	81 11       	cpse	r24, r1
     324:	04 c0       	rjmp	.+8      	; 0x32e <bmpReadShort+0xdc>
    {
        *errorCode = i2cCheckReturnCode(TW_MR_DATA_ACK);
     326:	80 e5       	ldi	r24, 0x50	; 80
     328:	0e 94 1d 01 	call	0x23a	; 0x23a <i2cCheckReturnCode>
     32c:	88 83       	st	Y, r24
    }
    //printf("Error code: %d\n", errorCode);
    
    //Get LSB from Slave
    if (*errorCode == 0)
     32e:	88 81       	ld	r24, Y
     330:	81 11       	cpse	r24, r1
     332:	05 c0       	rjmp	.+10     	; 0x33e <bmpReadShort+0xec>
    {
        i2cReadByteNOACK();
     334:	0e 94 ff 00 	call	0x1fe	; 0x1fe <i2cReadByteNOACK>
        *errorCode = i2cWaitForComplete();
     338:	0e 94 03 01 	call	0x206	; 0x206 <i2cWaitForComplete>
     33c:	88 83       	st	Y, r24
    }
    //printf("Error code: %d\n", errorCode);
    
    if (*errorCode == 0)
     33e:	88 81       	ld	r24, Y
     340:	81 11       	cpse	r24, r1
     342:	08 c0       	rjmp	.+16     	; 0x354 <bmpReadShort+0x102>
    {
        lsb = i2cGetReceivedByte(); // Get LSB result
     344:	0e 94 1a 01 	call	0x234	; 0x234 <i2cGetReceivedByte>
     348:	08 2f       	mov	r16, r24
     34a:	10 e0       	ldi	r17, 0x00	; 0
        *errorCode = i2cWaitForComplete();
     34c:	0e 94 03 01 	call	0x206	; 0x206 <i2cWaitForComplete>
     350:	88 83       	st	Y, r24
     352:	02 c0       	rjmp	.+4      	; 0x358 <bmpReadShort+0x106>
}

uint16_t bmpReadShort(uint8_t address, uint8_t* errorCode)
{
    uint16_t msb = 0;
    uint16_t lsb = 0;
     354:	00 e0       	ldi	r16, 0x00	; 0
     356:	10 e0       	ldi	r17, 0x00	; 0
        lsb = i2cGetReceivedByte(); // Get LSB result
        *errorCode = i2cWaitForComplete();
    }
    
    // NACKM
    if (*errorCode == 0)
     358:	88 81       	ld	r24, Y
     35a:	81 11       	cpse	r24, r1
     35c:	04 c0       	rjmp	.+8      	; 0x366 <bmpReadShort+0x114>
    {
        *errorCode = i2cCheckReturnCode(TW_MR_DATA_NACK);
     35e:	88 e5       	ldi	r24, 0x58	; 88
     360:	0e 94 1d 01 	call	0x23a	; 0x23a <i2cCheckReturnCode>
     364:	88 83       	st	Y, r24
    }
    //printf("Error code: %d\n", errorCode);
    //printf("TWSR STATUS: %d\n", (TWSR & 0xF8));
    
    // Send stop on the bus
    if (*errorCode == 0)
     366:	88 81       	ld	r24, Y
     368:	81 11       	cpse	r24, r1
     36a:	03 c0       	rjmp	.+6      	; 0x372 <bmpReadShort+0x120>
    {
        *errorCode = i2cStop();
     36c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <i2cStop>
     370:	88 83       	st	Y, r24
    }
    //printf("Error code: %d\n", errorCode);
    
    data = (msb << 8) + lsb;
     372:	9e 2d       	mov	r25, r14
     374:	88 27       	eor	r24, r24
    
    return data;
}
     376:	80 0f       	add	r24, r16
     378:	91 1f       	adc	r25, r17
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	08 95       	ret

00000388 <bmpCalibrate>:

int16_t calibrationSigned[8];
int16_t calibrationUnsigned[3];

void bmpCalibrate(uint8_t* errorcode)
{
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	ec 01       	movw	r28, r24
    if (*errorcode == 0)
     38e:	88 81       	ld	r24, Y
     390:	81 11       	cpse	r24, r1
     392:	08 c0       	rjmp	.+16     	; 0x3a4 <bmpCalibrate+0x1c>
    {
        calibrationSigned[0] = bmpReadShort(0xAA, errorcode); // ac1
     394:	be 01       	movw	r22, r28
     396:	8a ea       	ldi	r24, 0xAA	; 170
     398:	0e 94 29 01 	call	0x252	; 0x252 <bmpReadShort>
     39c:	90 93 71 01 	sts	0x0171, r25
     3a0:	80 93 70 01 	sts	0x0170, r24
    }
    
    if (*errorcode == 0)
     3a4:	88 81       	ld	r24, Y
     3a6:	81 11       	cpse	r24, r1
     3a8:	08 c0       	rjmp	.+16     	; 0x3ba <bmpCalibrate+0x32>
    {
        calibrationSigned[1] = bmpReadShort(0xAC, errorcode); // ac2
     3aa:	be 01       	movw	r22, r28
     3ac:	8c ea       	ldi	r24, 0xAC	; 172
     3ae:	0e 94 29 01 	call	0x252	; 0x252 <bmpReadShort>
     3b2:	90 93 73 01 	sts	0x0173, r25
     3b6:	80 93 72 01 	sts	0x0172, r24
    }
    
    if (*errorcode == 0)
     3ba:	88 81       	ld	r24, Y
     3bc:	81 11       	cpse	r24, r1
     3be:	08 c0       	rjmp	.+16     	; 0x3d0 <bmpCalibrate+0x48>
    {
        calibrationSigned[2] = bmpReadShort(0xAE, errorcode); // ac3
     3c0:	be 01       	movw	r22, r28
     3c2:	8e ea       	ldi	r24, 0xAE	; 174
     3c4:	0e 94 29 01 	call	0x252	; 0x252 <bmpReadShort>
     3c8:	90 93 75 01 	sts	0x0175, r25
     3cc:	80 93 74 01 	sts	0x0174, r24
    }
    
    if (*errorcode == 0)
     3d0:	88 81       	ld	r24, Y
     3d2:	81 11       	cpse	r24, r1
     3d4:	08 c0       	rjmp	.+16     	; 0x3e6 <bmpCalibrate+0x5e>
    {
        calibrationUnsigned[0] = bmpReadShort(0xB0, errorcode); // ac4
     3d6:	be 01       	movw	r22, r28
     3d8:	80 eb       	ldi	r24, 0xB0	; 176
     3da:	0e 94 29 01 	call	0x252	; 0x252 <bmpReadShort>
     3de:	90 93 81 01 	sts	0x0181, r25
     3e2:	80 93 80 01 	sts	0x0180, r24
    }
    
    if (*errorcode == 0)
     3e6:	88 81       	ld	r24, Y
     3e8:	81 11       	cpse	r24, r1
     3ea:	08 c0       	rjmp	.+16     	; 0x3fc <bmpCalibrate+0x74>
    {
        calibrationUnsigned[1] = bmpReadShort(0xB2, errorcode); // ac5
     3ec:	be 01       	movw	r22, r28
     3ee:	82 eb       	ldi	r24, 0xB2	; 178
     3f0:	0e 94 29 01 	call	0x252	; 0x252 <bmpReadShort>
     3f4:	90 93 83 01 	sts	0x0183, r25
     3f8:	80 93 82 01 	sts	0x0182, r24
    }
    
    if (*errorcode == 0)
     3fc:	88 81       	ld	r24, Y
     3fe:	81 11       	cpse	r24, r1
     400:	08 c0       	rjmp	.+16     	; 0x412 <bmpCalibrate+0x8a>
    {
        calibrationUnsigned[2] = bmpReadShort(0xB4, errorcode); // ac6
     402:	be 01       	movw	r22, r28
     404:	84 eb       	ldi	r24, 0xB4	; 180
     406:	0e 94 29 01 	call	0x252	; 0x252 <bmpReadShort>
     40a:	90 93 85 01 	sts	0x0185, r25
     40e:	80 93 84 01 	sts	0x0184, r24
    }
    
    if (*errorcode == 0)
     412:	88 81       	ld	r24, Y
     414:	81 11       	cpse	r24, r1
     416:	08 c0       	rjmp	.+16     	; 0x428 <bmpCalibrate+0xa0>
    {
        calibrationSigned[3] = bmpReadShort(0xB6, errorcode); // b1
     418:	be 01       	movw	r22, r28
     41a:	86 eb       	ldi	r24, 0xB6	; 182
     41c:	0e 94 29 01 	call	0x252	; 0x252 <bmpReadShort>
     420:	90 93 77 01 	sts	0x0177, r25
     424:	80 93 76 01 	sts	0x0176, r24
    }
    
    if (*errorcode == 0)
     428:	88 81       	ld	r24, Y
     42a:	81 11       	cpse	r24, r1
     42c:	08 c0       	rjmp	.+16     	; 0x43e <bmpCalibrate+0xb6>
    {
        calibrationSigned[4] = bmpReadShort(0xB8, errorcode); // b2
     42e:	be 01       	movw	r22, r28
     430:	88 eb       	ldi	r24, 0xB8	; 184
     432:	0e 94 29 01 	call	0x252	; 0x252 <bmpReadShort>
     436:	90 93 79 01 	sts	0x0179, r25
     43a:	80 93 78 01 	sts	0x0178, r24
    }
    
    if (*errorcode == 0)
     43e:	88 81       	ld	r24, Y
     440:	81 11       	cpse	r24, r1
     442:	08 c0       	rjmp	.+16     	; 0x454 <bmpCalibrate+0xcc>
    {
        calibrationSigned[5] = bmpReadShort(0xBA, errorcode); // mb
     444:	be 01       	movw	r22, r28
     446:	8a eb       	ldi	r24, 0xBA	; 186
     448:	0e 94 29 01 	call	0x252	; 0x252 <bmpReadShort>
     44c:	90 93 7b 01 	sts	0x017B, r25
     450:	80 93 7a 01 	sts	0x017A, r24
    }
    
    if (*errorcode == 0)
     454:	88 81       	ld	r24, Y
     456:	81 11       	cpse	r24, r1
     458:	08 c0       	rjmp	.+16     	; 0x46a <bmpCalibrate+0xe2>
    {
        calibrationSigned[6] = bmpReadShort(0xBC, errorcode); // mc
     45a:	be 01       	movw	r22, r28
     45c:	8c eb       	ldi	r24, 0xBC	; 188
     45e:	0e 94 29 01 	call	0x252	; 0x252 <bmpReadShort>
     462:	90 93 7d 01 	sts	0x017D, r25
     466:	80 93 7c 01 	sts	0x017C, r24
    }
    
    if (*errorcode == 0)
     46a:	88 81       	ld	r24, Y
     46c:	81 11       	cpse	r24, r1
     46e:	08 c0       	rjmp	.+16     	; 0x480 <bmpCalibrate+0xf8>
    {
        calibrationSigned[7] = bmpReadShort(0xBE, errorcode); // md
     470:	be 01       	movw	r22, r28
     472:	8e eb       	ldi	r24, 0xBE	; 190
     474:	0e 94 29 01 	call	0x252	; 0x252 <bmpReadShort>
     478:	90 93 7f 01 	sts	0x017F, r25
     47c:	80 93 7e 01 	sts	0x017E, r24
    }
}
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <bmpReadUT>:
    
    return data;
}

int32_t bmpReadUT(uint8_t* errorCode)
{
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	ec 01       	movw	r28, r24
    int32_t temperature = 0;
    
    // Send a start condition
    i2cStart();
     48c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2cStart>
    *errorCode = i2cWaitForComplete();
     490:	0e 94 03 01 	call	0x206	; 0x206 <i2cWaitForComplete>
     494:	88 83       	st	Y, r24
    
    if (*errorCode == 0)
     496:	81 11       	cpse	r24, r1
     498:	04 c0       	rjmp	.+8      	; 0x4a2 <bmpReadUT+0x1c>
    {
        *errorCode = i2cCheckReturnCode(TW_START);
     49a:	88 e0       	ldi	r24, 0x08	; 8
     49c:	0e 94 1d 01 	call	0x23a	; 0x23a <i2cCheckReturnCode>
     4a0:	88 83       	st	Y, r24
    }
        
    // Tell slave to go in receive mode
    if (*errorCode == 0)
     4a2:	88 81       	ld	r24, Y
     4a4:	81 11       	cpse	r24, r1
     4a6:	06 c0       	rjmp	.+12     	; 0x4b4 <bmpReadUT+0x2e>
    {
        i2cSendByte(BMP085_W); // Write 0xEE
     4a8:	8e ee       	ldi	r24, 0xEE	; 238
     4aa:	0e 94 f5 00 	call	0x1ea	; 0x1ea <i2cSendByte>
        *errorCode = i2cWaitForComplete();
     4ae:	0e 94 03 01 	call	0x206	; 0x206 <i2cWaitForComplete>
     4b2:	88 83       	st	Y, r24
    }
    
    // ACKS
    if (*errorCode == 0)
     4b4:	88 81       	ld	r24, Y
     4b6:	81 11       	cpse	r24, r1
     4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <bmpReadUT+0x3c>
    {
        *errorCode = i2cCheckReturnCode(TW_MT_SLA_ACK);
     4ba:	88 e1       	ldi	r24, 0x18	; 24
     4bc:	0e 94 1d 01 	call	0x23a	; 0x23a <i2cCheckReturnCode>
     4c0:	88 83       	st	Y, r24
    }
    //printf("Error code: %d\n", errorCode);
    
    //Write control register address
    if (*errorCode == 0)
     4c2:	88 81       	ld	r24, Y
     4c4:	81 11       	cpse	r24, r1
     4c6:	06 c0       	rjmp	.+12     	; 0x4d4 <bmpReadUT+0x4e>
    {
        i2cSendByte(0xF4); // write 0xF4
     4c8:	84 ef       	ldi	r24, 0xF4	; 244
     4ca:	0e 94 f5 00 	call	0x1ea	; 0x1ea <i2cSendByte>
        *errorCode=i2cWaitForComplete();
     4ce:	0e 94 03 01 	call	0x206	; 0x206 <i2cWaitForComplete>
     4d2:	88 83       	st	Y, r24
    }
    
    // ACKS
    if (*errorCode == 0)
     4d4:	88 81       	ld	r24, Y
     4d6:	81 11       	cpse	r24, r1
     4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <bmpReadUT+0x5c>
    {
        *errorCode=i2cCheckReturnCode(TW_MT_DATA_ACK);
     4da:	88 e2       	ldi	r24, 0x28	; 40
     4dc:	0e 94 1d 01 	call	0x23a	; 0x23a <i2cCheckReturnCode>
     4e0:	88 83       	st	Y, r24
    }
    //printf("Error code: %d\n", errorCode);
    //printf("TWSR STATUS: %d\n", (TWSR & 0xF8));
    
    // Write control register value
    if (*errorCode == 0)
     4e2:	88 81       	ld	r24, Y
     4e4:	81 11       	cpse	r24, r1
     4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <bmpReadUT+0x6e>
    {
        i2cSendByte(0x2E); // write 0x2E
     4e8:	8e e2       	ldi	r24, 0x2E	; 46
     4ea:	0e 94 f5 00 	call	0x1ea	; 0x1ea <i2cSendByte>
        *errorCode=i2cWaitForComplete();
     4ee:	0e 94 03 01 	call	0x206	; 0x206 <i2cWaitForComplete>
     4f2:	88 83       	st	Y, r24
    }
    // ACKS
    if (*errorCode == 0)
     4f4:	88 81       	ld	r24, Y
     4f6:	81 11       	cpse	r24, r1
     4f8:	04 c0       	rjmp	.+8      	; 0x502 <__stack+0x3>
    {
        *errorCode=i2cCheckReturnCode(TW_MT_DATA_ACK);
     4fa:	88 e2       	ldi	r24, 0x28	; 40
     4fc:	0e 94 1d 01 	call	0x23a	; 0x23a <i2cCheckReturnCode>
     500:	88 83       	st	Y, r24
    }
    //printf("Error code: %d\n", errorCode);
    
    // Send a stop condition
    if (*errorCode == 0)
     502:	88 81       	ld	r24, Y
     504:	81 11       	cpse	r24, r1
     506:	03 c0       	rjmp	.+6      	; 0x50e <__stack+0xf>
    {
        *errorCode=i2cStop();
     508:	0e 94 db 00 	call	0x1b6	; 0x1b6 <i2cStop>
     50c:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     50e:	8f e0       	ldi	r24, 0x0F	; 15
     510:	97 e2       	ldi	r25, 0x27	; 39
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	f1 f7       	brne	.-4      	; 0x512 <__stack+0x13>
     516:	00 c0       	rjmp	.+0      	; 0x518 <__stack+0x19>
     518:	00 00       	nop
    }
    //printf("Error code: %d\n", errorCode);
    
    _delay_ms(5); // Minimum time is 4.5 ms
    
    if (*errorCode == 0)
     51a:	88 81       	ld	r24, Y
     51c:	81 11       	cpse	r24, r1
     51e:	08 c0       	rjmp	.+16     	; 0x530 <__stack+0x31>
    {
        temperature = bmpReadShort(0xF6,errorCode);
     520:	be 01       	movw	r22, r28
     522:	86 ef       	ldi	r24, 0xF6	; 246
     524:	0e 94 29 01 	call	0x252	; 0x252 <bmpReadShort>
     528:	bc 01       	movw	r22, r24
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	03 c0       	rjmp	.+6      	; 0x536 <__stack+0x37>
    return data;
}

int32_t bmpReadUT(uint8_t* errorCode)
{
    int32_t temperature = 0;
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	cb 01       	movw	r24, r22
    {
        temperature = bmpReadShort(0xF6,errorCode);
    }
    
    return temperature;
}
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <bmpReadUP>:

int32_t bmpReadUP(uint8_t* errorCode)
{
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	ec 01       	movw	r28, r24
    int32_t pressure = 0;
    
    // Send a start condition
    i2cStart();
     542:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2cStart>
    *errorCode=i2cWaitForComplete();
     546:	0e 94 03 01 	call	0x206	; 0x206 <i2cWaitForComplete>
     54a:	88 83       	st	Y, r24
    
    if (*errorCode == 0)
     54c:	81 11       	cpse	r24, r1
     54e:	04 c0       	rjmp	.+8      	; 0x558 <bmpReadUP+0x1c>
    {
        *errorCode = i2cCheckReturnCode(TW_START);
     550:	88 e0       	ldi	r24, 0x08	; 8
     552:	0e 94 1d 01 	call	0x23a	; 0x23a <i2cCheckReturnCode>
     556:	88 83       	st	Y, r24
    }
    //printf("Error code: %d\n", errorCode);
    
    // Tell slave to go in receive mode
    if (*errorCode == 0)
     558:	88 81       	ld	r24, Y
     55a:	81 11       	cpse	r24, r1
     55c:	06 c0       	rjmp	.+12     	; 0x56a <bmpReadUP+0x2e>
    {
        i2cSendByte(BMP085_W); // write 0xEE
     55e:	8e ee       	ldi	r24, 0xEE	; 238
     560:	0e 94 f5 00 	call	0x1ea	; 0x1ea <i2cSendByte>
        *errorCode = i2cWaitForComplete();
     564:	0e 94 03 01 	call	0x206	; 0x206 <i2cWaitForComplete>
     568:	88 83       	st	Y, r24
    }
    
    // ACKS
    if (*errorCode == 0)
     56a:	88 81       	ld	r24, Y
     56c:	81 11       	cpse	r24, r1
     56e:	04 c0       	rjmp	.+8      	; 0x578 <bmpReadUP+0x3c>
    {
        *errorCode = i2cCheckReturnCode(TW_MT_SLA_ACK);
     570:	88 e1       	ldi	r24, 0x18	; 24
     572:	0e 94 1d 01 	call	0x23a	; 0x23a <i2cCheckReturnCode>
     576:	88 83       	st	Y, r24
    }
    //printf("Error code: %d\n", errorCode);
    
    // Write control register address
    if (*errorCode == 0)
     578:	88 81       	ld	r24, Y
     57a:	81 11       	cpse	r24, r1
     57c:	06 c0       	rjmp	.+12     	; 0x58a <bmpReadUP+0x4e>
    {
        i2cSendByte(0xF4); // write 0xF4
     57e:	84 ef       	ldi	r24, 0xF4	; 244
     580:	0e 94 f5 00 	call	0x1ea	; 0x1ea <i2cSendByte>
        *errorCode = i2cWaitForComplete();
     584:	0e 94 03 01 	call	0x206	; 0x206 <i2cWaitForComplete>
     588:	88 83       	st	Y, r24
    }
    
    // ACKS
    if (*errorCode == 0)
     58a:	88 81       	ld	r24, Y
     58c:	81 11       	cpse	r24, r1
     58e:	04 c0       	rjmp	.+8      	; 0x598 <bmpReadUP+0x5c>
    {
        *errorCode = i2cCheckReturnCode(TW_MT_DATA_ACK);
     590:	88 e2       	ldi	r24, 0x28	; 40
     592:	0e 94 1d 01 	call	0x23a	; 0x23a <i2cCheckReturnCode>
     596:	88 83       	st	Y, r24
    }
    //printf("Error code: %d\n", errorCode);
    //printf("TWSR STATUS: %d \n", (TWSR & 0xF8));
    
    // Write control register value
    if (*errorCode == 0)
     598:	88 81       	ld	r24, Y
     59a:	81 11       	cpse	r24, r1
     59c:	06 c0       	rjmp	.+12     	; 0x5aa <bmpReadUP+0x6e>
    {
        i2cSendByte(0x34 + (OSS << 6)); // write 0x34 + (OSS << 6)
     59e:	84 ef       	ldi	r24, 0xF4	; 244
     5a0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <i2cSendByte>
        *errorCode = i2cWaitForComplete();
     5a4:	0e 94 03 01 	call	0x206	; 0x206 <i2cWaitForComplete>
     5a8:	88 83       	st	Y, r24
    }
    
    // ACKS
    if (*errorCode == 0)
     5aa:	88 81       	ld	r24, Y
     5ac:	81 11       	cpse	r24, r1
     5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <bmpReadUP+0x7c>
    {
        *errorCode = i2cCheckReturnCode(TW_MT_DATA_ACK);
     5b0:	88 e2       	ldi	r24, 0x28	; 40
     5b2:	0e 94 1d 01 	call	0x23a	; 0x23a <i2cCheckReturnCode>
     5b6:	88 83       	st	Y, r24
    }
    //printf("Error code: %d\n", errorCode);
    
    // Send a stop condition
    if (*errorCode == 0)
     5b8:	88 81       	ld	r24, Y
     5ba:	81 11       	cpse	r24, r1
     5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <bmpReadUP+0x88>
    {
        *errorCode = i2cStop();
     5be:	0e 94 db 00 	call	0x1b6	; 0x1b6 <i2cStop>
     5c2:	88 83       	st	Y, r24
     5c4:	8f e1       	ldi	r24, 0x1F	; 31
     5c6:	9b ec       	ldi	r25, 0xCB	; 203
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <bmpReadUP+0x8c>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <bmpReadUP+0x92>
     5ce:	00 00       	nop
    //printf("Error code: %d\n", errorCode);
    
    //_delay_ms(16); // Minimum time is 15 ms
    _delay_ms(2 + (3 << OSS));
    
    if (*errorCode == 0)
     5d0:	88 81       	ld	r24, Y
     5d2:	81 11       	cpse	r24, r1
     5d4:	0f c0       	rjmp	.+30     	; 0x5f4 <bmpReadUP+0xb8>
    {
        pressure = bmpReadShort(0xF6, errorCode);
     5d6:	be 01       	movw	r22, r28
     5d8:	86 ef       	ldi	r24, 0xF6	; 246
     5da:	0e 94 29 01 	call	0x252	; 0x252 <bmpReadShort>
     5de:	bc 01       	movw	r22, r24
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
        pressure = pressure << 8;
        pressure = pressure >> (8 - OSS);
     5e4:	23 e0       	ldi	r18, 0x03	; 3
     5e6:	66 0f       	add	r22, r22
     5e8:	77 1f       	adc	r23, r23
     5ea:	88 1f       	adc	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	2a 95       	dec	r18
     5f0:	d1 f7       	brne	.-12     	; 0x5e6 <bmpReadUP+0xaa>
     5f2:	03 c0       	rjmp	.+6      	; 0x5fa <bmpReadUP+0xbe>
    return temperature;
}

int32_t bmpReadUP(uint8_t* errorCode)
{
    int32_t pressure = 0;
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	cb 01       	movw	r24, r22
        pressure = pressure << 8;
        pressure = pressure >> (8 - OSS);
    }
    
    return pressure;
}
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	08 95       	ret

00000600 <bmpComputePressureAndTemperature>:

void bmpComputePressureAndTemperature(int32_t* temperature, int32_t* pressure,
                                      uint8_t* errorCode)
{
     600:	2f 92       	push	r2
     602:	3f 92       	push	r3
     604:	4f 92       	push	r4
     606:	5f 92       	push	r5
     608:	6f 92       	push	r6
     60a:	7f 92       	push	r7
     60c:	8f 92       	push	r8
     60e:	9f 92       	push	r9
     610:	af 92       	push	r10
     612:	bf 92       	push	r11
     614:	cf 92       	push	r12
     616:	df 92       	push	r13
     618:	ef 92       	push	r14
     61a:	ff 92       	push	r15
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	cd b7       	in	r28, 0x3d	; 61
     626:	de b7       	in	r29, 0x3e	; 62
     628:	64 97       	sbiw	r28, 0x14	; 20
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	de bf       	out	0x3e, r29	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	cd bf       	out	0x3d, r28	; 61
     634:	98 8b       	std	Y+16, r25	; 0x10
     636:	8f 87       	std	Y+15, r24	; 0x0f
     638:	7a 8b       	std	Y+18, r23	; 0x12
     63a:	69 8b       	std	Y+17, r22	; 0x11
    int32_t ut = 0;
    int32_t up = 0;
    int32_t x1, x2, b5, b6, x3, b3, p;
    uint32_t b4, b7;
    int16_t ac1 = calibrationSigned[0];
     63c:	80 91 70 01 	lds	r24, 0x0170
     640:	90 91 71 01 	lds	r25, 0x0171
     644:	9a 87       	std	Y+10, r25	; 0x0a
     646:	89 87       	std	Y+9, r24	; 0x09
    int16_t ac2 = calibrationSigned[1]; 
     648:	00 91 72 01 	lds	r16, 0x0172
     64c:	10 91 73 01 	lds	r17, 0x0173
    int16_t ac3 = calibrationSigned[2]; 
     650:	a0 91 74 01 	lds	r26, 0x0174
     654:	b0 91 75 01 	lds	r27, 0x0175
     658:	ba 83       	std	Y+2, r27	; 0x02
     65a:	a9 83       	std	Y+1, r26	; 0x01
    uint16_t ac4 = calibrationUnsigned[0];
     65c:	e0 91 80 01 	lds	r30, 0x0180
     660:	f0 91 81 01 	lds	r31, 0x0181
     664:	fc 87       	std	Y+12, r31	; 0x0c
     666:	eb 87       	std	Y+11, r30	; 0x0b
    uint16_t ac5 = calibrationUnsigned[1];
     668:	c0 90 82 01 	lds	r12, 0x0182
     66c:	d0 90 83 01 	lds	r13, 0x0183
    uint16_t ac6 = calibrationUnsigned[2];
     670:	a0 90 84 01 	lds	r10, 0x0184
     674:	b0 90 85 01 	lds	r11, 0x0185
    int16_t b1 = calibrationSigned[3]; 
     678:	80 91 76 01 	lds	r24, 0x0176
     67c:	90 91 77 01 	lds	r25, 0x0177
     680:	9e 87       	std	Y+14, r25	; 0x0e
     682:	8d 87       	std	Y+13, r24	; 0x0d
    int16_t b2 = calibrationSigned[4];
     684:	20 90 78 01 	lds	r2, 0x0178
     688:	30 90 79 01 	lds	r3, 0x0179
    //int16_t mb = calibrationSigned[5];
    int16_t mc = calibrationSigned[6];
     68c:	e0 90 7c 01 	lds	r14, 0x017C
     690:	f0 90 7d 01 	lds	r15, 0x017D
    int16_t md = calibrationSigned[7];
     694:	80 90 7e 01 	lds	r8, 0x017E
     698:	90 90 7f 01 	lds	r9, 0x017F
    
    if (*errorCode == 0)
     69c:	da 01       	movw	r26, r20
     69e:	8c 91       	ld	r24, X
     6a0:	81 11       	cpse	r24, r1
     6a2:	0a c0       	rjmp	.+20     	; 0x6b8 <bmpComputePressureAndTemperature+0xb8>
    {
        ut = bmpReadUT(errorCode);
     6a4:	ca 01       	movw	r24, r20
     6a6:	4b 8b       	std	Y+19, r20	; 0x13
     6a8:	5c 8b       	std	Y+20, r21	; 0x14
     6aa:	0e 94 43 02 	call	0x486	; 0x486 <bmpReadUT>
     6ae:	2b 01       	movw	r4, r22
     6b0:	3c 01       	movw	r6, r24
     6b2:	4b 89       	ldd	r20, Y+19	; 0x13
     6b4:	5c 89       	ldd	r21, Y+20	; 0x14
     6b6:	03 c0       	rjmp	.+6      	; 0x6be <bmpComputePressureAndTemperature+0xbe>
}

void bmpComputePressureAndTemperature(int32_t* temperature, int32_t* pressure,
                                      uint8_t* errorCode)
{
    int32_t ut = 0;
     6b8:	41 2c       	mov	r4, r1
     6ba:	51 2c       	mov	r5, r1
     6bc:	32 01       	movw	r6, r4
    if (*errorCode == 0)
    {
        ut = bmpReadUT(errorCode);
    }
    
    if (*errorCode == 0)
     6be:	fa 01       	movw	r30, r20
     6c0:	80 81       	ld	r24, Z
     6c2:	81 11       	cpse	r24, r1
     6c4:	08 c0       	rjmp	.+16     	; 0x6d6 <bmpComputePressureAndTemperature+0xd6>
    {
        up = bmpReadUP(errorCode);
     6c6:	ca 01       	movw	r24, r20
     6c8:	0e 94 9e 02 	call	0x53c	; 0x53c <bmpReadUP>
     6cc:	6d 83       	std	Y+5, r22	; 0x05
     6ce:	7e 83       	std	Y+6, r23	; 0x06
     6d0:	8f 83       	std	Y+7, r24	; 0x07
     6d2:	98 87       	std	Y+8, r25	; 0x08
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <bmpComputePressureAndTemperature+0xde>

void bmpComputePressureAndTemperature(int32_t* temperature, int32_t* pressure,
                                      uint8_t* errorCode)
{
    int32_t ut = 0;
    int32_t up = 0;
     6d6:	1d 82       	std	Y+5, r1	; 0x05
     6d8:	1e 82       	std	Y+6, r1	; 0x06
     6da:	1f 82       	std	Y+7, r1	; 0x07
     6dc:	18 86       	std	Y+8, r1	; 0x08
    if (*errorCode == 0)
    {
        up = bmpReadUP(errorCode);
    }
    
    x1 = ((int32_t) ut - (int32_t) ac6) * (int32_t) ac5 >> 15;
     6de:	a3 01       	movw	r20, r6
     6e0:	92 01       	movw	r18, r4
     6e2:	2a 19       	sub	r18, r10
     6e4:	3b 09       	sbc	r19, r11
     6e6:	41 09       	sbc	r20, r1
     6e8:	51 09       	sbc	r21, r1
     6ea:	d6 01       	movw	r26, r12
     6ec:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__muluhisi3>
     6f0:	2b 01       	movw	r4, r22
     6f2:	3c 01       	movw	r6, r24
     6f4:	ff e0       	ldi	r31, 0x0F	; 15
     6f6:	75 94       	asr	r7
     6f8:	67 94       	ror	r6
     6fa:	57 94       	ror	r5
     6fc:	47 94       	ror	r4
     6fe:	fa 95       	dec	r31
     700:	d1 f7       	brne	.-12     	; 0x6f6 <bmpComputePressureAndTemperature+0xf6>
    x2 = ((int32_t) mc << 11) / (x1 + md);
     702:	b7 01       	movw	r22, r14
     704:	88 27       	eor	r24, r24
     706:	77 fd       	sbrc	r23, 7
     708:	80 95       	com	r24
     70a:	98 2f       	mov	r25, r24
     70c:	ab e0       	ldi	r26, 0x0B	; 11
     70e:	66 0f       	add	r22, r22
     710:	77 1f       	adc	r23, r23
     712:	88 1f       	adc	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	aa 95       	dec	r26
     718:	d1 f7       	brne	.-12     	; 0x70e <bmpComputePressureAndTemperature+0x10e>
     71a:	94 01       	movw	r18, r8
     71c:	44 27       	eor	r20, r20
     71e:	37 fd       	sbrc	r19, 7
     720:	40 95       	com	r20
     722:	54 2f       	mov	r21, r20
     724:	24 0d       	add	r18, r4
     726:	35 1d       	adc	r19, r5
     728:	46 1d       	adc	r20, r6
     72a:	57 1d       	adc	r21, r7
     72c:	0e 94 86 05 	call	0xb0c	; 0xb0c <__divmodsi4>
    b5 = x1 + x2;
     730:	24 0d       	add	r18, r4
     732:	35 1d       	adc	r19, r5
     734:	46 1d       	adc	r20, r6
     736:	57 1d       	adc	r21, r7
    *temperature = (b5 + 8) >> 4;
     738:	da 01       	movw	r26, r20
     73a:	c9 01       	movw	r24, r18
     73c:	08 96       	adiw	r24, 0x08	; 8
     73e:	a1 1d       	adc	r26, r1
     740:	b1 1d       	adc	r27, r1
     742:	64 e0       	ldi	r22, 0x04	; 4
     744:	b5 95       	asr	r27
     746:	a7 95       	ror	r26
     748:	97 95       	ror	r25
     74a:	87 95       	ror	r24
     74c:	6a 95       	dec	r22
     74e:	d1 f7       	brne	.-12     	; 0x744 <bmpComputePressureAndTemperature+0x144>
     750:	ef 85       	ldd	r30, Y+15	; 0x0f
     752:	f8 89       	ldd	r31, Y+16	; 0x10
     754:	80 83       	st	Z, r24
     756:	91 83       	std	Z+1, r25	; 0x01
     758:	a2 83       	std	Z+2, r26	; 0x02
     75a:	b3 83       	std	Z+3, r27	; 0x03
    
    b6 = b5 - 4000;
     75c:	29 01       	movw	r4, r18
     75e:	3a 01       	movw	r6, r20
     760:	f0 ea       	ldi	r31, 0xA0	; 160
     762:	4f 1a       	sub	r4, r31
     764:	ff e0       	ldi	r31, 0x0F	; 15
     766:	5f 0a       	sbc	r5, r31
     768:	61 08       	sbc	r6, r1
     76a:	71 08       	sbc	r7, r1
    x1 = (b2 * ((b6 * b6) >> 12)) >> 11;
     76c:	a3 01       	movw	r20, r6
     76e:	92 01       	movw	r18, r4
     770:	c3 01       	movw	r24, r6
     772:	b2 01       	movw	r22, r4
     774:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__mulsi3>
     778:	6b 01       	movw	r12, r22
     77a:	7c 01       	movw	r14, r24
     77c:	7c e0       	ldi	r23, 0x0C	; 12
     77e:	f5 94       	asr	r15
     780:	e7 94       	ror	r14
     782:	d7 94       	ror	r13
     784:	c7 94       	ror	r12
     786:	7a 95       	dec	r23
     788:	d1 f7       	brne	.-12     	; 0x77e <bmpComputePressureAndTemperature+0x17e>
    x2 = (ac2 * b6) >> 11;
    x3 = x1 + x2;
    b3 = (((((int32_t) ac1) * 4 + x3) << OSS) + 2) >> 2;
    x1 = (ac3 * b6) >> 13;
     78a:	a9 81       	ldd	r26, Y+1	; 0x01
     78c:	ba 81       	ldd	r27, Y+2	; 0x02
     78e:	0e 94 b0 05 	call	0xb60	; 0xb60 <__mulshisi3>
     792:	4b 01       	movw	r8, r22
     794:	5c 01       	movw	r10, r24
     796:	ed e0       	ldi	r30, 0x0D	; 13
     798:	b5 94       	asr	r11
     79a:	a7 94       	ror	r10
     79c:	97 94       	ror	r9
     79e:	87 94       	ror	r8
     7a0:	ea 95       	dec	r30
     7a2:	d1 f7       	brne	.-12     	; 0x798 <bmpComputePressureAndTemperature+0x198>
    x2 = (b1 * ((b6 * b6) >> 12)) >> 16;
     7a4:	ad 85       	ldd	r26, Y+13	; 0x0d
     7a6:	be 85       	ldd	r27, Y+14	; 0x0e
     7a8:	a7 01       	movw	r20, r14
     7aa:	96 01       	movw	r18, r12
     7ac:	0e 94 b0 05 	call	0xb60	; 0xb60 <__mulshisi3>
     7b0:	bb 27       	eor	r27, r27
     7b2:	97 fd       	sbrc	r25, 7
     7b4:	b0 95       	com	r27
     7b6:	ab 2f       	mov	r26, r27
    x3 = ((x1 + x2) + 2) >> 2;
     7b8:	88 0e       	add	r8, r24
     7ba:	99 1e       	adc	r9, r25
     7bc:	aa 1e       	adc	r10, r26
     7be:	bb 1e       	adc	r11, r27
     7c0:	82 e0       	ldi	r24, 0x02	; 2
     7c2:	88 0e       	add	r8, r24
     7c4:	91 1c       	adc	r9, r1
     7c6:	a1 1c       	adc	r10, r1
     7c8:	b1 1c       	adc	r11, r1
     7ca:	a2 e0       	ldi	r26, 0x02	; 2
     7cc:	b5 94       	asr	r11
     7ce:	a7 94       	ror	r10
     7d0:	97 94       	ror	r9
     7d2:	87 94       	ror	r8
     7d4:	aa 95       	dec	r26
     7d6:	d1 f7       	brne	.-12     	; 0x7cc <bmpComputePressureAndTemperature+0x1cc>
    b4 = (ac4 * (uint32_t) (x3 + 32768)) >> 15;
     7d8:	90 e8       	ldi	r25, 0x80	; 128
     7da:	99 0e       	add	r9, r25
     7dc:	a1 1c       	adc	r10, r1
     7de:	b1 1c       	adc	r11, r1
     7e0:	ab 85       	ldd	r26, Y+11	; 0x0b
     7e2:	bc 85       	ldd	r27, Y+12	; 0x0c
     7e4:	a5 01       	movw	r20, r10
     7e6:	94 01       	movw	r18, r8
     7e8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__muluhisi3>
     7ec:	dc 01       	movw	r26, r24
     7ee:	cb 01       	movw	r24, r22
     7f0:	2f e0       	ldi	r18, 0x0F	; 15
     7f2:	b6 95       	lsr	r27
     7f4:	a7 95       	ror	r26
     7f6:	97 95       	ror	r25
     7f8:	87 95       	ror	r24
     7fa:	2a 95       	dec	r18
     7fc:	d1 f7       	brne	.-12     	; 0x7f2 <bmpComputePressureAndTemperature+0x1f2>
     7fe:	89 83       	std	Y+1, r24	; 0x01
     800:	9a 83       	std	Y+2, r25	; 0x02
     802:	ab 83       	std	Y+3, r26	; 0x03
     804:	bc 83       	std	Y+4, r27	; 0x04
    
    b6 = b5 - 4000;
    x1 = (b2 * ((b6 * b6) >> 12)) >> 11;
    x2 = (ac2 * b6) >> 11;
    x3 = x1 + x2;
    b3 = (((((int32_t) ac1) * 4 + x3) << OSS) + 2) >> 2;
     806:	a9 85       	ldd	r26, Y+9	; 0x09
     808:	ba 85       	ldd	r27, Y+10	; 0x0a
     80a:	4d 01       	movw	r8, r26
     80c:	aa 24       	eor	r10, r10
     80e:	97 fc       	sbrc	r9, 7
     810:	a0 94       	com	r10
     812:	ba 2c       	mov	r11, r10
     814:	32 e0       	ldi	r19, 0x02	; 2
     816:	88 0c       	add	r8, r8
     818:	99 1c       	adc	r9, r9
     81a:	aa 1c       	adc	r10, r10
     81c:	bb 1c       	adc	r11, r11
     81e:	3a 95       	dec	r19
     820:	d1 f7       	brne	.-12     	; 0x816 <bmpComputePressureAndTemperature+0x216>
    x2 = ((int32_t) mc << 11) / (x1 + md);
    b5 = x1 + x2;
    *temperature = (b5 + 8) >> 4;
    
    b6 = b5 - 4000;
    x1 = (b2 * ((b6 * b6) >> 12)) >> 11;
     822:	d1 01       	movw	r26, r2
     824:	a7 01       	movw	r20, r14
     826:	96 01       	movw	r18, r12
     828:	0e 94 b0 05 	call	0xb60	; 0xb60 <__mulshisi3>
     82c:	6b 01       	movw	r12, r22
     82e:	7c 01       	movw	r14, r24
     830:	4b e0       	ldi	r20, 0x0B	; 11
     832:	f5 94       	asr	r15
     834:	e7 94       	ror	r14
     836:	d7 94       	ror	r13
     838:	c7 94       	ror	r12
     83a:	4a 95       	dec	r20
     83c:	d1 f7       	brne	.-12     	; 0x832 <bmpComputePressureAndTemperature+0x232>
    x2 = (ac2 * b6) >> 11;
     83e:	d8 01       	movw	r26, r16
     840:	a3 01       	movw	r20, r6
     842:	92 01       	movw	r18, r4
     844:	0e 94 b0 05 	call	0xb60	; 0xb60 <__mulshisi3>
     848:	5b e0       	ldi	r21, 0x0B	; 11
     84a:	95 95       	asr	r25
     84c:	87 95       	ror	r24
     84e:	77 95       	ror	r23
     850:	67 95       	ror	r22
     852:	5a 95       	dec	r21
     854:	d1 f7       	brne	.-12     	; 0x84a <bmpComputePressureAndTemperature+0x24a>
    x3 = x1 + x2;
     856:	c6 0e       	add	r12, r22
     858:	d7 1e       	adc	r13, r23
     85a:	e8 1e       	adc	r14, r24
     85c:	f9 1e       	adc	r15, r25
    b3 = (((((int32_t) ac1) * 4 + x3) << OSS) + 2) >> 2;
     85e:	8c 0c       	add	r8, r12
     860:	9d 1c       	adc	r9, r13
     862:	ae 1c       	adc	r10, r14
     864:	bf 1c       	adc	r11, r15
     866:	88 0c       	add	r8, r8
     868:	99 1c       	adc	r9, r9
     86a:	aa 1c       	adc	r10, r10
     86c:	bb 1c       	adc	r11, r11
    x1 = (ac3 * b6) >> 13;
    x2 = (b1 * ((b6 * b6) >> 12)) >> 16;
    x3 = ((x1 + x2) + 2) >> 2;
    b4 = (ac4 * (uint32_t) (x3 + 32768)) >> 15;
    b7 = ((uint32_t) (up - b3) * (50000 >> OSS));
     86e:	2d 81       	ldd	r18, Y+5	; 0x05
     870:	3e 81       	ldd	r19, Y+6	; 0x06
     872:	4f 81       	ldd	r20, Y+7	; 0x07
     874:	58 85       	ldd	r21, Y+8	; 0x08
     876:	28 19       	sub	r18, r8
     878:	39 09       	sbc	r19, r9
     87a:	4a 09       	sbc	r20, r10
     87c:	5b 09       	sbc	r21, r11
     87e:	aa e6       	ldi	r26, 0x6A	; 106
     880:	b8 e1       	ldi	r27, 0x18	; 24
     882:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__muluhisi3>
    //p = b7 < 0x80000000 ? (b7 * 2) / b4 : (b7 / b4) * 2;
    
    if (b7 < 0x80000000)
     886:	97 fd       	sbrc	r25, 7
     888:	0d c0       	rjmp	.+26     	; 0x8a4 <bmpComputePressureAndTemperature+0x2a4>
    {
        p = (b7 << 1) / b4;
     88a:	66 0f       	add	r22, r22
     88c:	77 1f       	adc	r23, r23
     88e:	88 1f       	adc	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	29 81       	ldd	r18, Y+1	; 0x01
     894:	3a 81       	ldd	r19, Y+2	; 0x02
     896:	4b 81       	ldd	r20, Y+3	; 0x03
     898:	5c 81       	ldd	r21, Y+4	; 0x04
     89a:	0e 94 64 05 	call	0xac8	; 0xac8 <__udivmodsi4>
     89e:	49 01       	movw	r8, r18
     8a0:	5a 01       	movw	r10, r20
     8a2:	0c c0       	rjmp	.+24     	; 0x8bc <bmpComputePressureAndTemperature+0x2bc>
    }
    
    else
    { 
        p = (b7 / b4) << 1;
     8a4:	29 81       	ldd	r18, Y+1	; 0x01
     8a6:	3a 81       	ldd	r19, Y+2	; 0x02
     8a8:	4b 81       	ldd	r20, Y+3	; 0x03
     8aa:	5c 81       	ldd	r21, Y+4	; 0x04
     8ac:	0e 94 64 05 	call	0xac8	; 0xac8 <__udivmodsi4>
     8b0:	49 01       	movw	r8, r18
     8b2:	5a 01       	movw	r10, r20
     8b4:	88 0c       	add	r8, r8
     8b6:	99 1c       	adc	r9, r9
     8b8:	aa 1c       	adc	r10, r10
     8ba:	bb 1c       	adc	r11, r11
    }
    
    x1 = (p >> 8) * (p >> 8);
     8bc:	99 27       	eor	r25, r25
     8be:	b7 fc       	sbrc	r11, 7
     8c0:	9a 95       	dec	r25
     8c2:	8b 2d       	mov	r24, r11
     8c4:	7a 2d       	mov	r23, r10
     8c6:	69 2d       	mov	r22, r9
     8c8:	9b 01       	movw	r18, r22
     8ca:	ac 01       	movw	r20, r24
     8cc:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__mulsi3>
     8d0:	9b 01       	movw	r18, r22
     8d2:	ac 01       	movw	r20, r24
    x1 = (x1 * 3038) >> 16;
     8d4:	ae ed       	ldi	r26, 0xDE	; 222
     8d6:	bb e0       	ldi	r27, 0x0B	; 11
     8d8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__muluhisi3>
     8dc:	6c 01       	movw	r12, r24
     8de:	ff 24       	eor	r15, r15
     8e0:	d7 fc       	sbrc	r13, 7
     8e2:	f0 94       	com	r15
     8e4:	ef 2c       	mov	r14, r15
    x2 = (-7357 * p) >> 16;
     8e6:	a3 e4       	ldi	r26, 0x43	; 67
     8e8:	b3 ee       	ldi	r27, 0xE3	; 227
     8ea:	a5 01       	movw	r20, r10
     8ec:	94 01       	movw	r18, r8
     8ee:	0e 94 b3 05 	call	0xb66	; 0xb66 <__mulohisi3>
     8f2:	bb 27       	eor	r27, r27
     8f4:	97 fd       	sbrc	r25, 7
     8f6:	b0 95       	com	r27
     8f8:	ab 2f       	mov	r26, r27
    *pressure = p + ((x1 + x2 + 3791) >> 4);
     8fa:	c8 0e       	add	r12, r24
     8fc:	d9 1e       	adc	r13, r25
     8fe:	ea 1e       	adc	r14, r26
     900:	fb 1e       	adc	r15, r27
     902:	bf ec       	ldi	r27, 0xCF	; 207
     904:	cb 0e       	add	r12, r27
     906:	be e0       	ldi	r27, 0x0E	; 14
     908:	db 1e       	adc	r13, r27
     90a:	e1 1c       	adc	r14, r1
     90c:	f1 1c       	adc	r15, r1
     90e:	64 e0       	ldi	r22, 0x04	; 4
     910:	f5 94       	asr	r15
     912:	e7 94       	ror	r14
     914:	d7 94       	ror	r13
     916:	c7 94       	ror	r12
     918:	6a 95       	dec	r22
     91a:	d1 f7       	brne	.-12     	; 0x910 <bmpComputePressureAndTemperature+0x310>
     91c:	c8 0c       	add	r12, r8
     91e:	d9 1c       	adc	r13, r9
     920:	ea 1c       	adc	r14, r10
     922:	fb 1c       	adc	r15, r11
     924:	e9 89       	ldd	r30, Y+17	; 0x11
     926:	fa 89       	ldd	r31, Y+18	; 0x12
     928:	c0 82       	st	Z, r12
     92a:	d1 82       	std	Z+1, r13	; 0x01
     92c:	e2 82       	std	Z+2, r14	; 0x02
     92e:	f3 82       	std	Z+3, r15	; 0x03
}
     930:	64 96       	adiw	r28, 0x14	; 20
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f be       	out	0x3f, r0	; 63
     93a:	cd bf       	out	0x3d, r28	; 61
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	ff 90       	pop	r15
     946:	ef 90       	pop	r14
     948:	df 90       	pop	r13
     94a:	cf 90       	pop	r12
     94c:	bf 90       	pop	r11
     94e:	af 90       	pop	r10
     950:	9f 90       	pop	r9
     952:	8f 90       	pop	r8
     954:	7f 90       	pop	r7
     956:	6f 90       	pop	r6
     958:	5f 90       	pop	r5
     95a:	4f 90       	pop	r4
     95c:	3f 90       	pop	r3
     95e:	2f 90       	pop	r2
     960:	08 95       	ret

00000962 <bmpComputeAltitude>:
int32_t bmpComputeAltitude(int32_t pressure)
{
    float temp;
    int32_t altitude;
    
    temp = (float) pressure / 101325;
     962:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__floatsisf>
     966:	20 e8       	ldi	r18, 0x80	; 128
     968:	36 ee       	ldi	r19, 0xE6	; 230
     96a:	45 ec       	ldi	r20, 0xC5	; 197
     96c:	57 e4       	ldi	r21, 0x47	; 71
     96e:	0e 94 2c 06 	call	0xc58	; 0xc58 <__divsf3>
    temp = 1 - pow(temp, 0.19029);
     972:	22 e6       	ldi	r18, 0x62	; 98
     974:	3b ed       	ldi	r19, 0xDB	; 219
     976:	42 e4       	ldi	r20, 0x42	; 66
     978:	5e e3       	ldi	r21, 0x3E	; 62
     97a:	0e 94 b6 07 	call	0xf6c	; 0xf6c <pow>
     97e:	9b 01       	movw	r18, r22
     980:	ac 01       	movw	r20, r24
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	80 e8       	ldi	r24, 0x80	; 128
     988:	9f e3       	ldi	r25, 0x3F	; 63
     98a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__subsf3>
    altitude = round(44330 * temp * 10);
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	3a e2       	ldi	r19, 0x2A	; 42
     992:	4d e2       	ldi	r20, 0x2D	; 45
     994:	57 e4       	ldi	r21, 0x47	; 71
     996:	0e 94 53 07 	call	0xea6	; 0xea6 <__mulsf3>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e2       	ldi	r20, 0x20	; 32
     9a0:	51 e4       	ldi	r21, 0x41	; 65
     9a2:	0e 94 53 07 	call	0xea6	; 0xea6 <__mulsf3>
     9a6:	0e 94 02 08 	call	0x1004	; 0x1004 <round>
     9aa:	0e 94 94 06 	call	0xd28	; 0xd28 <__fixsfsi>
    
    // Return altitude in dm
    return altitude;
}
     9ae:	08 95       	ret

000009b0 <main>:
#include "uart.h"
#include "i2c.h"
#include "bmp.h"

int main(void)
{
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	29 97       	sbiw	r28, 0x09	; 9
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	f8 94       	cli
     9be:	de bf       	out	0x3e, r29	; 62
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	cd bf       	out	0x3d, r28	; 61
    int32_t temperature = 0;
     9c4:	1d 82       	std	Y+5, r1	; 0x05
     9c6:	1e 82       	std	Y+6, r1	; 0x06
     9c8:	1f 82       	std	Y+7, r1	; 0x07
     9ca:	18 86       	std	Y+8, r1	; 0x08
    int32_t pressure = 0;
     9cc:	19 82       	std	Y+1, r1	; 0x01
     9ce:	1a 82       	std	Y+2, r1	; 0x02
     9d0:	1b 82       	std	Y+3, r1	; 0x03
     9d2:	1c 82       	std	Y+4, r1	; 0x04
    uint8_t errorCode = 0;
     9d4:	19 86       	std	Y+9, r1	; 0x09
    
    // Call setup functions
    uartSetup();
     9d6:	0e 94 a5 00 	call	0x14a	; 0x14a <uartSetup>
    i2cSetup();
     9da:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <i2cSetup>
    bmpCalibrate(&errorCode);
     9de:	ce 01       	movw	r24, r28
     9e0:	09 96       	adiw	r24, 0x09	; 9
     9e2:	0e 94 c4 01 	call	0x388	; 0x388 <bmpCalibrate>
    while (1)
    {
        bmpComputePressureAndTemperature(&temperature, &pressure, &errorCode);
        
        //printf("Temperature: %ld (in 0.1 degress Celcius)\n", temperature);
		printf("Temperature: %ld (in degress Celcius)\n", temperature/10);
     9e6:	8a e0       	ldi	r24, 0x0A	; 10
     9e8:	48 2e       	mov	r4, r24
     9ea:	51 2c       	mov	r5, r1
     9ec:	61 2c       	mov	r6, r1
     9ee:	71 2c       	mov	r7, r1
     9f0:	9e e0       	ldi	r25, 0x0E	; 14
     9f2:	a9 2e       	mov	r10, r25
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	b9 2e       	mov	r11, r25
        printf("Pressure: %ld Pa\n", pressure);
     9f8:	25 e3       	ldi	r18, 0x35	; 53
     9fa:	c2 2e       	mov	r12, r18
     9fc:	21 e0       	ldi	r18, 0x01	; 1
     9fe:	d2 2e       	mov	r13, r18
        //printf("Altitude: %ld dm\n", bmpComputeAltitude(pressure));
		printf("Altitude: %ld m\n", bmpComputeAltitude(pressure)/10);
     a00:	37 e4       	ldi	r19, 0x47	; 71
     a02:	e3 2e       	mov	r14, r19
     a04:	31 e0       	ldi	r19, 0x01	; 1
     a06:	f3 2e       	mov	r15, r19
        printf("Global error code: %d\n\n", errorCode);
     a08:	08 e5       	ldi	r16, 0x58	; 88
     a0a:	11 e0       	ldi	r17, 0x01	; 1
    i2cSetup();
    bmpCalibrate(&errorCode);
        
    while (1)
    {
        bmpComputePressureAndTemperature(&temperature, &pressure, &errorCode);
     a0c:	ae 01       	movw	r20, r28
     a0e:	47 5f       	subi	r20, 0xF7	; 247
     a10:	5f 4f       	sbci	r21, 0xFF	; 255
     a12:	be 01       	movw	r22, r28
     a14:	6f 5f       	subi	r22, 0xFF	; 255
     a16:	7f 4f       	sbci	r23, 0xFF	; 255
     a18:	ce 01       	movw	r24, r28
     a1a:	05 96       	adiw	r24, 0x05	; 5
     a1c:	0e 94 00 03 	call	0x600	; 0x600 <bmpComputePressureAndTemperature>
        
        //printf("Temperature: %ld (in 0.1 degress Celcius)\n", temperature);
		printf("Temperature: %ld (in degress Celcius)\n", temperature/10);
     a20:	6d 81       	ldd	r22, Y+5	; 0x05
     a22:	7e 81       	ldd	r23, Y+6	; 0x06
     a24:	8f 81       	ldd	r24, Y+7	; 0x07
     a26:	98 85       	ldd	r25, Y+8	; 0x08
     a28:	a3 01       	movw	r20, r6
     a2a:	92 01       	movw	r18, r4
     a2c:	0e 94 86 05 	call	0xb0c	; 0xb0c <__divmodsi4>
     a30:	5f 93       	push	r21
     a32:	4f 93       	push	r20
     a34:	3f 93       	push	r19
     a36:	2f 93       	push	r18
     a38:	bf 92       	push	r11
     a3a:	af 92       	push	r10
     a3c:	0e 94 56 09 	call	0x12ac	; 0x12ac <printf>
        printf("Pressure: %ld Pa\n", pressure);
     a40:	8c 81       	ldd	r24, Y+4	; 0x04
     a42:	8f 93       	push	r24
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	8f 93       	push	r24
     a48:	8a 81       	ldd	r24, Y+2	; 0x02
     a4a:	8f 93       	push	r24
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	8f 93       	push	r24
     a50:	df 92       	push	r13
     a52:	cf 92       	push	r12
     a54:	0e 94 56 09 	call	0x12ac	; 0x12ac <printf>
        //printf("Altitude: %ld dm\n", bmpComputeAltitude(pressure));
		printf("Altitude: %ld m\n", bmpComputeAltitude(pressure)/10);
     a58:	69 81       	ldd	r22, Y+1	; 0x01
     a5a:	7a 81       	ldd	r23, Y+2	; 0x02
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	9c 81       	ldd	r25, Y+4	; 0x04
     a60:	0e 94 b1 04 	call	0x962	; 0x962 <bmpComputeAltitude>
     a64:	a3 01       	movw	r20, r6
     a66:	92 01       	movw	r18, r4
     a68:	0e 94 86 05 	call	0xb0c	; 0xb0c <__divmodsi4>
     a6c:	5f 93       	push	r21
     a6e:	4f 93       	push	r20
     a70:	3f 93       	push	r19
     a72:	2f 93       	push	r18
     a74:	ff 92       	push	r15
     a76:	ef 92       	push	r14
     a78:	0e 94 56 09 	call	0x12ac	; 0x12ac <printf>
        printf("Global error code: %d\n\n", errorCode);
     a7c:	89 85       	ldd	r24, Y+9	; 0x09
     a7e:	1f 92       	push	r1
     a80:	8f 93       	push	r24
     a82:	1f 93       	push	r17
     a84:	0f 93       	push	r16
     a86:	0e 94 56 09 	call	0x12ac	; 0x12ac <printf>
     a8a:	2f ef       	ldi	r18, 0xFF	; 255
     a8c:	83 ed       	ldi	r24, 0xD3	; 211
     a8e:	90 e3       	ldi	r25, 0x30	; 48
     a90:	21 50       	subi	r18, 0x01	; 1
     a92:	80 40       	sbci	r24, 0x00	; 0
     a94:	90 40       	sbci	r25, 0x00	; 0
     a96:	e1 f7       	brne	.-8      	; 0xa90 <main+0xe0>
     a98:	00 c0       	rjmp	.+0      	; 0xa9a <main+0xea>
     a9a:	00 00       	nop
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	b2 cf       	rjmp	.-156    	; 0xa0c <main+0x5c>

00000aa8 <__mulsi3>:
     aa8:	db 01       	movw	r26, r22
     aaa:	8f 93       	push	r24
     aac:	9f 93       	push	r25
     aae:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__muluhisi3>
     ab2:	bf 91       	pop	r27
     ab4:	af 91       	pop	r26
     ab6:	a2 9f       	mul	r26, r18
     ab8:	80 0d       	add	r24, r0
     aba:	91 1d       	adc	r25, r1
     abc:	a3 9f       	mul	r26, r19
     abe:	90 0d       	add	r25, r0
     ac0:	b2 9f       	mul	r27, r18
     ac2:	90 0d       	add	r25, r0
     ac4:	11 24       	eor	r1, r1
     ac6:	08 95       	ret

00000ac8 <__udivmodsi4>:
     ac8:	a1 e2       	ldi	r26, 0x21	; 33
     aca:	1a 2e       	mov	r1, r26
     acc:	aa 1b       	sub	r26, r26
     ace:	bb 1b       	sub	r27, r27
     ad0:	fd 01       	movw	r30, r26
     ad2:	0d c0       	rjmp	.+26     	; 0xaee <__udivmodsi4_ep>

00000ad4 <__udivmodsi4_loop>:
     ad4:	aa 1f       	adc	r26, r26
     ad6:	bb 1f       	adc	r27, r27
     ad8:	ee 1f       	adc	r30, r30
     ada:	ff 1f       	adc	r31, r31
     adc:	a2 17       	cp	r26, r18
     ade:	b3 07       	cpc	r27, r19
     ae0:	e4 07       	cpc	r30, r20
     ae2:	f5 07       	cpc	r31, r21
     ae4:	20 f0       	brcs	.+8      	; 0xaee <__udivmodsi4_ep>
     ae6:	a2 1b       	sub	r26, r18
     ae8:	b3 0b       	sbc	r27, r19
     aea:	e4 0b       	sbc	r30, r20
     aec:	f5 0b       	sbc	r31, r21

00000aee <__udivmodsi4_ep>:
     aee:	66 1f       	adc	r22, r22
     af0:	77 1f       	adc	r23, r23
     af2:	88 1f       	adc	r24, r24
     af4:	99 1f       	adc	r25, r25
     af6:	1a 94       	dec	r1
     af8:	69 f7       	brne	.-38     	; 0xad4 <__udivmodsi4_loop>
     afa:	60 95       	com	r22
     afc:	70 95       	com	r23
     afe:	80 95       	com	r24
     b00:	90 95       	com	r25
     b02:	9b 01       	movw	r18, r22
     b04:	ac 01       	movw	r20, r24
     b06:	bd 01       	movw	r22, r26
     b08:	cf 01       	movw	r24, r30
     b0a:	08 95       	ret

00000b0c <__divmodsi4>:
     b0c:	05 2e       	mov	r0, r21
     b0e:	97 fb       	bst	r25, 7
     b10:	1e f4       	brtc	.+6      	; 0xb18 <__divmodsi4+0xc>
     b12:	00 94       	com	r0
     b14:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__negsi2>
     b18:	57 fd       	sbrc	r21, 7
     b1a:	07 d0       	rcall	.+14     	; 0xb2a <__divmodsi4_neg2>
     b1c:	0e 94 64 05 	call	0xac8	; 0xac8 <__udivmodsi4>
     b20:	07 fc       	sbrc	r0, 7
     b22:	03 d0       	rcall	.+6      	; 0xb2a <__divmodsi4_neg2>
     b24:	4e f4       	brtc	.+18     	; 0xb38 <__divmodsi4_exit>
     b26:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__negsi2>

00000b2a <__divmodsi4_neg2>:
     b2a:	50 95       	com	r21
     b2c:	40 95       	com	r20
     b2e:	30 95       	com	r19
     b30:	21 95       	neg	r18
     b32:	3f 4f       	sbci	r19, 0xFF	; 255
     b34:	4f 4f       	sbci	r20, 0xFF	; 255
     b36:	5f 4f       	sbci	r21, 0xFF	; 255

00000b38 <__divmodsi4_exit>:
     b38:	08 95       	ret

00000b3a <__negsi2>:
     b3a:	90 95       	com	r25
     b3c:	80 95       	com	r24
     b3e:	70 95       	com	r23
     b40:	61 95       	neg	r22
     b42:	7f 4f       	sbci	r23, 0xFF	; 255
     b44:	8f 4f       	sbci	r24, 0xFF	; 255
     b46:	9f 4f       	sbci	r25, 0xFF	; 255
     b48:	08 95       	ret

00000b4a <__muluhisi3>:
     b4a:	0e 94 b8 05 	call	0xb70	; 0xb70 <__umulhisi3>
     b4e:	a5 9f       	mul	r26, r21
     b50:	90 0d       	add	r25, r0
     b52:	b4 9f       	mul	r27, r20
     b54:	90 0d       	add	r25, r0
     b56:	a4 9f       	mul	r26, r20
     b58:	80 0d       	add	r24, r0
     b5a:	91 1d       	adc	r25, r1
     b5c:	11 24       	eor	r1, r1
     b5e:	08 95       	ret

00000b60 <__mulshisi3>:
     b60:	b7 ff       	sbrs	r27, 7
     b62:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__muluhisi3>

00000b66 <__mulohisi3>:
     b66:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__muluhisi3>
     b6a:	82 1b       	sub	r24, r18
     b6c:	93 0b       	sbc	r25, r19
     b6e:	08 95       	ret

00000b70 <__umulhisi3>:
     b70:	a2 9f       	mul	r26, r18
     b72:	b0 01       	movw	r22, r0
     b74:	b3 9f       	mul	r27, r19
     b76:	c0 01       	movw	r24, r0
     b78:	a3 9f       	mul	r26, r19
     b7a:	70 0d       	add	r23, r0
     b7c:	81 1d       	adc	r24, r1
     b7e:	11 24       	eor	r1, r1
     b80:	91 1d       	adc	r25, r1
     b82:	b2 9f       	mul	r27, r18
     b84:	70 0d       	add	r23, r0
     b86:	81 1d       	adc	r24, r1
     b88:	11 24       	eor	r1, r1
     b8a:	91 1d       	adc	r25, r1
     b8c:	08 95       	ret

00000b8e <__subsf3>:
     b8e:	50 58       	subi	r21, 0x80	; 128

00000b90 <__addsf3>:
     b90:	bb 27       	eor	r27, r27
     b92:	aa 27       	eor	r26, r26
     b94:	0e d0       	rcall	.+28     	; 0xbb2 <__addsf3x>
     b96:	4d c1       	rjmp	.+666    	; 0xe32 <__fp_round>
     b98:	3e d1       	rcall	.+636    	; 0xe16 <__fp_pscA>
     b9a:	30 f0       	brcs	.+12     	; 0xba8 <__addsf3+0x18>
     b9c:	43 d1       	rcall	.+646    	; 0xe24 <__fp_pscB>
     b9e:	20 f0       	brcs	.+8      	; 0xba8 <__addsf3+0x18>
     ba0:	31 f4       	brne	.+12     	; 0xbae <__addsf3+0x1e>
     ba2:	9f 3f       	cpi	r25, 0xFF	; 255
     ba4:	11 f4       	brne	.+4      	; 0xbaa <__addsf3+0x1a>
     ba6:	1e f4       	brtc	.+6      	; 0xbae <__addsf3+0x1e>
     ba8:	33 c1       	rjmp	.+614    	; 0xe10 <__fp_nan>
     baa:	0e f4       	brtc	.+2      	; 0xbae <__addsf3+0x1e>
     bac:	e0 95       	com	r30
     bae:	e7 fb       	bst	r30, 7
     bb0:	29 c1       	rjmp	.+594    	; 0xe04 <__fp_inf>

00000bb2 <__addsf3x>:
     bb2:	e9 2f       	mov	r30, r25
     bb4:	4f d1       	rcall	.+670    	; 0xe54 <__fp_split3>
     bb6:	80 f3       	brcs	.-32     	; 0xb98 <__addsf3+0x8>
     bb8:	ba 17       	cp	r27, r26
     bba:	62 07       	cpc	r22, r18
     bbc:	73 07       	cpc	r23, r19
     bbe:	84 07       	cpc	r24, r20
     bc0:	95 07       	cpc	r25, r21
     bc2:	18 f0       	brcs	.+6      	; 0xbca <__addsf3x+0x18>
     bc4:	71 f4       	brne	.+28     	; 0xbe2 <__addsf3x+0x30>
     bc6:	9e f5       	brtc	.+102    	; 0xc2e <__addsf3x+0x7c>
     bc8:	67 c1       	rjmp	.+718    	; 0xe98 <__fp_zero>
     bca:	0e f4       	brtc	.+2      	; 0xbce <__addsf3x+0x1c>
     bcc:	e0 95       	com	r30
     bce:	0b 2e       	mov	r0, r27
     bd0:	ba 2f       	mov	r27, r26
     bd2:	a0 2d       	mov	r26, r0
     bd4:	0b 01       	movw	r0, r22
     bd6:	b9 01       	movw	r22, r18
     bd8:	90 01       	movw	r18, r0
     bda:	0c 01       	movw	r0, r24
     bdc:	ca 01       	movw	r24, r20
     bde:	a0 01       	movw	r20, r0
     be0:	11 24       	eor	r1, r1
     be2:	ff 27       	eor	r31, r31
     be4:	59 1b       	sub	r21, r25
     be6:	99 f0       	breq	.+38     	; 0xc0e <__addsf3x+0x5c>
     be8:	59 3f       	cpi	r21, 0xF9	; 249
     bea:	50 f4       	brcc	.+20     	; 0xc00 <__addsf3x+0x4e>
     bec:	50 3e       	cpi	r21, 0xE0	; 224
     bee:	68 f1       	brcs	.+90     	; 0xc4a <__addsf3x+0x98>
     bf0:	1a 16       	cp	r1, r26
     bf2:	f0 40       	sbci	r31, 0x00	; 0
     bf4:	a2 2f       	mov	r26, r18
     bf6:	23 2f       	mov	r18, r19
     bf8:	34 2f       	mov	r19, r20
     bfa:	44 27       	eor	r20, r20
     bfc:	58 5f       	subi	r21, 0xF8	; 248
     bfe:	f3 cf       	rjmp	.-26     	; 0xbe6 <__addsf3x+0x34>
     c00:	46 95       	lsr	r20
     c02:	37 95       	ror	r19
     c04:	27 95       	ror	r18
     c06:	a7 95       	ror	r26
     c08:	f0 40       	sbci	r31, 0x00	; 0
     c0a:	53 95       	inc	r21
     c0c:	c9 f7       	brne	.-14     	; 0xc00 <__addsf3x+0x4e>
     c0e:	7e f4       	brtc	.+30     	; 0xc2e <__addsf3x+0x7c>
     c10:	1f 16       	cp	r1, r31
     c12:	ba 0b       	sbc	r27, r26
     c14:	62 0b       	sbc	r22, r18
     c16:	73 0b       	sbc	r23, r19
     c18:	84 0b       	sbc	r24, r20
     c1a:	ba f0       	brmi	.+46     	; 0xc4a <__addsf3x+0x98>
     c1c:	91 50       	subi	r25, 0x01	; 1
     c1e:	a1 f0       	breq	.+40     	; 0xc48 <__addsf3x+0x96>
     c20:	ff 0f       	add	r31, r31
     c22:	bb 1f       	adc	r27, r27
     c24:	66 1f       	adc	r22, r22
     c26:	77 1f       	adc	r23, r23
     c28:	88 1f       	adc	r24, r24
     c2a:	c2 f7       	brpl	.-16     	; 0xc1c <__addsf3x+0x6a>
     c2c:	0e c0       	rjmp	.+28     	; 0xc4a <__addsf3x+0x98>
     c2e:	ba 0f       	add	r27, r26
     c30:	62 1f       	adc	r22, r18
     c32:	73 1f       	adc	r23, r19
     c34:	84 1f       	adc	r24, r20
     c36:	48 f4       	brcc	.+18     	; 0xc4a <__addsf3x+0x98>
     c38:	87 95       	ror	r24
     c3a:	77 95       	ror	r23
     c3c:	67 95       	ror	r22
     c3e:	b7 95       	ror	r27
     c40:	f7 95       	ror	r31
     c42:	9e 3f       	cpi	r25, 0xFE	; 254
     c44:	08 f0       	brcs	.+2      	; 0xc48 <__addsf3x+0x96>
     c46:	b3 cf       	rjmp	.-154    	; 0xbae <__addsf3+0x1e>
     c48:	93 95       	inc	r25
     c4a:	88 0f       	add	r24, r24
     c4c:	08 f0       	brcs	.+2      	; 0xc50 <__addsf3x+0x9e>
     c4e:	99 27       	eor	r25, r25
     c50:	ee 0f       	add	r30, r30
     c52:	97 95       	ror	r25
     c54:	87 95       	ror	r24
     c56:	08 95       	ret

00000c58 <__divsf3>:
     c58:	0c d0       	rcall	.+24     	; 0xc72 <__divsf3x>
     c5a:	eb c0       	rjmp	.+470    	; 0xe32 <__fp_round>
     c5c:	e3 d0       	rcall	.+454    	; 0xe24 <__fp_pscB>
     c5e:	40 f0       	brcs	.+16     	; 0xc70 <__divsf3+0x18>
     c60:	da d0       	rcall	.+436    	; 0xe16 <__fp_pscA>
     c62:	30 f0       	brcs	.+12     	; 0xc70 <__divsf3+0x18>
     c64:	21 f4       	brne	.+8      	; 0xc6e <__divsf3+0x16>
     c66:	5f 3f       	cpi	r21, 0xFF	; 255
     c68:	19 f0       	breq	.+6      	; 0xc70 <__divsf3+0x18>
     c6a:	cc c0       	rjmp	.+408    	; 0xe04 <__fp_inf>
     c6c:	51 11       	cpse	r21, r1
     c6e:	15 c1       	rjmp	.+554    	; 0xe9a <__fp_szero>
     c70:	cf c0       	rjmp	.+414    	; 0xe10 <__fp_nan>

00000c72 <__divsf3x>:
     c72:	f0 d0       	rcall	.+480    	; 0xe54 <__fp_split3>
     c74:	98 f3       	brcs	.-26     	; 0xc5c <__divsf3+0x4>

00000c76 <__divsf3_pse>:
     c76:	99 23       	and	r25, r25
     c78:	c9 f3       	breq	.-14     	; 0xc6c <__divsf3+0x14>
     c7a:	55 23       	and	r21, r21
     c7c:	b1 f3       	breq	.-20     	; 0xc6a <__divsf3+0x12>
     c7e:	95 1b       	sub	r25, r21
     c80:	55 0b       	sbc	r21, r21
     c82:	bb 27       	eor	r27, r27
     c84:	aa 27       	eor	r26, r26
     c86:	62 17       	cp	r22, r18
     c88:	73 07       	cpc	r23, r19
     c8a:	84 07       	cpc	r24, r20
     c8c:	38 f0       	brcs	.+14     	; 0xc9c <__divsf3_pse+0x26>
     c8e:	9f 5f       	subi	r25, 0xFF	; 255
     c90:	5f 4f       	sbci	r21, 0xFF	; 255
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	44 1f       	adc	r20, r20
     c98:	aa 1f       	adc	r26, r26
     c9a:	a9 f3       	breq	.-22     	; 0xc86 <__divsf3_pse+0x10>
     c9c:	33 d0       	rcall	.+102    	; 0xd04 <__divsf3_pse+0x8e>
     c9e:	0e 2e       	mov	r0, r30
     ca0:	3a f0       	brmi	.+14     	; 0xcb0 <__divsf3_pse+0x3a>
     ca2:	e0 e8       	ldi	r30, 0x80	; 128
     ca4:	30 d0       	rcall	.+96     	; 0xd06 <__divsf3_pse+0x90>
     ca6:	91 50       	subi	r25, 0x01	; 1
     ca8:	50 40       	sbci	r21, 0x00	; 0
     caa:	e6 95       	lsr	r30
     cac:	00 1c       	adc	r0, r0
     cae:	ca f7       	brpl	.-14     	; 0xca2 <__divsf3_pse+0x2c>
     cb0:	29 d0       	rcall	.+82     	; 0xd04 <__divsf3_pse+0x8e>
     cb2:	fe 2f       	mov	r31, r30
     cb4:	27 d0       	rcall	.+78     	; 0xd04 <__divsf3_pse+0x8e>
     cb6:	66 0f       	add	r22, r22
     cb8:	77 1f       	adc	r23, r23
     cba:	88 1f       	adc	r24, r24
     cbc:	bb 1f       	adc	r27, r27
     cbe:	26 17       	cp	r18, r22
     cc0:	37 07       	cpc	r19, r23
     cc2:	48 07       	cpc	r20, r24
     cc4:	ab 07       	cpc	r26, r27
     cc6:	b0 e8       	ldi	r27, 0x80	; 128
     cc8:	09 f0       	breq	.+2      	; 0xccc <__divsf3_pse+0x56>
     cca:	bb 0b       	sbc	r27, r27
     ccc:	80 2d       	mov	r24, r0
     cce:	bf 01       	movw	r22, r30
     cd0:	ff 27       	eor	r31, r31
     cd2:	93 58       	subi	r25, 0x83	; 131
     cd4:	5f 4f       	sbci	r21, 0xFF	; 255
     cd6:	2a f0       	brmi	.+10     	; 0xce2 <__divsf3_pse+0x6c>
     cd8:	9e 3f       	cpi	r25, 0xFE	; 254
     cda:	51 05       	cpc	r21, r1
     cdc:	68 f0       	brcs	.+26     	; 0xcf8 <__divsf3_pse+0x82>
     cde:	92 c0       	rjmp	.+292    	; 0xe04 <__fp_inf>
     ce0:	dc c0       	rjmp	.+440    	; 0xe9a <__fp_szero>
     ce2:	5f 3f       	cpi	r21, 0xFF	; 255
     ce4:	ec f3       	brlt	.-6      	; 0xce0 <__divsf3_pse+0x6a>
     ce6:	98 3e       	cpi	r25, 0xE8	; 232
     ce8:	dc f3       	brlt	.-10     	; 0xce0 <__divsf3_pse+0x6a>
     cea:	86 95       	lsr	r24
     cec:	77 95       	ror	r23
     cee:	67 95       	ror	r22
     cf0:	b7 95       	ror	r27
     cf2:	f7 95       	ror	r31
     cf4:	9f 5f       	subi	r25, 0xFF	; 255
     cf6:	c9 f7       	brne	.-14     	; 0xcea <__divsf3_pse+0x74>
     cf8:	88 0f       	add	r24, r24
     cfa:	91 1d       	adc	r25, r1
     cfc:	96 95       	lsr	r25
     cfe:	87 95       	ror	r24
     d00:	97 f9       	bld	r25, 7
     d02:	08 95       	ret
     d04:	e1 e0       	ldi	r30, 0x01	; 1
     d06:	66 0f       	add	r22, r22
     d08:	77 1f       	adc	r23, r23
     d0a:	88 1f       	adc	r24, r24
     d0c:	bb 1f       	adc	r27, r27
     d0e:	62 17       	cp	r22, r18
     d10:	73 07       	cpc	r23, r19
     d12:	84 07       	cpc	r24, r20
     d14:	ba 07       	cpc	r27, r26
     d16:	20 f0       	brcs	.+8      	; 0xd20 <__divsf3_pse+0xaa>
     d18:	62 1b       	sub	r22, r18
     d1a:	73 0b       	sbc	r23, r19
     d1c:	84 0b       	sbc	r24, r20
     d1e:	ba 0b       	sbc	r27, r26
     d20:	ee 1f       	adc	r30, r30
     d22:	88 f7       	brcc	.-30     	; 0xd06 <__divsf3_pse+0x90>
     d24:	e0 95       	com	r30
     d26:	08 95       	ret

00000d28 <__fixsfsi>:
     d28:	04 d0       	rcall	.+8      	; 0xd32 <__fixunssfsi>
     d2a:	68 94       	set
     d2c:	b1 11       	cpse	r27, r1
     d2e:	b5 c0       	rjmp	.+362    	; 0xe9a <__fp_szero>
     d30:	08 95       	ret

00000d32 <__fixunssfsi>:
     d32:	98 d0       	rcall	.+304    	; 0xe64 <__fp_splitA>
     d34:	88 f0       	brcs	.+34     	; 0xd58 <__fixunssfsi+0x26>
     d36:	9f 57       	subi	r25, 0x7F	; 127
     d38:	90 f0       	brcs	.+36     	; 0xd5e <__fixunssfsi+0x2c>
     d3a:	b9 2f       	mov	r27, r25
     d3c:	99 27       	eor	r25, r25
     d3e:	b7 51       	subi	r27, 0x17	; 23
     d40:	a0 f0       	brcs	.+40     	; 0xd6a <__fixunssfsi+0x38>
     d42:	d1 f0       	breq	.+52     	; 0xd78 <__fixunssfsi+0x46>
     d44:	66 0f       	add	r22, r22
     d46:	77 1f       	adc	r23, r23
     d48:	88 1f       	adc	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	1a f0       	brmi	.+6      	; 0xd54 <__fixunssfsi+0x22>
     d4e:	ba 95       	dec	r27
     d50:	c9 f7       	brne	.-14     	; 0xd44 <__fixunssfsi+0x12>
     d52:	12 c0       	rjmp	.+36     	; 0xd78 <__fixunssfsi+0x46>
     d54:	b1 30       	cpi	r27, 0x01	; 1
     d56:	81 f0       	breq	.+32     	; 0xd78 <__fixunssfsi+0x46>
     d58:	9f d0       	rcall	.+318    	; 0xe98 <__fp_zero>
     d5a:	b1 e0       	ldi	r27, 0x01	; 1
     d5c:	08 95       	ret
     d5e:	9c c0       	rjmp	.+312    	; 0xe98 <__fp_zero>
     d60:	67 2f       	mov	r22, r23
     d62:	78 2f       	mov	r23, r24
     d64:	88 27       	eor	r24, r24
     d66:	b8 5f       	subi	r27, 0xF8	; 248
     d68:	39 f0       	breq	.+14     	; 0xd78 <__fixunssfsi+0x46>
     d6a:	b9 3f       	cpi	r27, 0xF9	; 249
     d6c:	cc f3       	brlt	.-14     	; 0xd60 <__fixunssfsi+0x2e>
     d6e:	86 95       	lsr	r24
     d70:	77 95       	ror	r23
     d72:	67 95       	ror	r22
     d74:	b3 95       	inc	r27
     d76:	d9 f7       	brne	.-10     	; 0xd6e <__fixunssfsi+0x3c>
     d78:	3e f4       	brtc	.+14     	; 0xd88 <__fixunssfsi+0x56>
     d7a:	90 95       	com	r25
     d7c:	80 95       	com	r24
     d7e:	70 95       	com	r23
     d80:	61 95       	neg	r22
     d82:	7f 4f       	sbci	r23, 0xFF	; 255
     d84:	8f 4f       	sbci	r24, 0xFF	; 255
     d86:	9f 4f       	sbci	r25, 0xFF	; 255
     d88:	08 95       	ret

00000d8a <__floatunsisf>:
     d8a:	e8 94       	clt
     d8c:	09 c0       	rjmp	.+18     	; 0xda0 <__floatsisf+0x12>

00000d8e <__floatsisf>:
     d8e:	97 fb       	bst	r25, 7
     d90:	3e f4       	brtc	.+14     	; 0xda0 <__floatsisf+0x12>
     d92:	90 95       	com	r25
     d94:	80 95       	com	r24
     d96:	70 95       	com	r23
     d98:	61 95       	neg	r22
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	8f 4f       	sbci	r24, 0xFF	; 255
     d9e:	9f 4f       	sbci	r25, 0xFF	; 255
     da0:	99 23       	and	r25, r25
     da2:	a9 f0       	breq	.+42     	; 0xdce <__floatsisf+0x40>
     da4:	f9 2f       	mov	r31, r25
     da6:	96 e9       	ldi	r25, 0x96	; 150
     da8:	bb 27       	eor	r27, r27
     daa:	93 95       	inc	r25
     dac:	f6 95       	lsr	r31
     dae:	87 95       	ror	r24
     db0:	77 95       	ror	r23
     db2:	67 95       	ror	r22
     db4:	b7 95       	ror	r27
     db6:	f1 11       	cpse	r31, r1
     db8:	f8 cf       	rjmp	.-16     	; 0xdaa <__floatsisf+0x1c>
     dba:	fa f4       	brpl	.+62     	; 0xdfa <__floatsisf+0x6c>
     dbc:	bb 0f       	add	r27, r27
     dbe:	11 f4       	brne	.+4      	; 0xdc4 <__floatsisf+0x36>
     dc0:	60 ff       	sbrs	r22, 0
     dc2:	1b c0       	rjmp	.+54     	; 0xdfa <__floatsisf+0x6c>
     dc4:	6f 5f       	subi	r22, 0xFF	; 255
     dc6:	7f 4f       	sbci	r23, 0xFF	; 255
     dc8:	8f 4f       	sbci	r24, 0xFF	; 255
     dca:	9f 4f       	sbci	r25, 0xFF	; 255
     dcc:	16 c0       	rjmp	.+44     	; 0xdfa <__floatsisf+0x6c>
     dce:	88 23       	and	r24, r24
     dd0:	11 f0       	breq	.+4      	; 0xdd6 <__floatsisf+0x48>
     dd2:	96 e9       	ldi	r25, 0x96	; 150
     dd4:	11 c0       	rjmp	.+34     	; 0xdf8 <__floatsisf+0x6a>
     dd6:	77 23       	and	r23, r23
     dd8:	21 f0       	breq	.+8      	; 0xde2 <__floatsisf+0x54>
     dda:	9e e8       	ldi	r25, 0x8E	; 142
     ddc:	87 2f       	mov	r24, r23
     dde:	76 2f       	mov	r23, r22
     de0:	05 c0       	rjmp	.+10     	; 0xdec <__floatsisf+0x5e>
     de2:	66 23       	and	r22, r22
     de4:	71 f0       	breq	.+28     	; 0xe02 <__floatsisf+0x74>
     de6:	96 e8       	ldi	r25, 0x86	; 134
     de8:	86 2f       	mov	r24, r22
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	2a f0       	brmi	.+10     	; 0xdfa <__floatsisf+0x6c>
     df0:	9a 95       	dec	r25
     df2:	66 0f       	add	r22, r22
     df4:	77 1f       	adc	r23, r23
     df6:	88 1f       	adc	r24, r24
     df8:	da f7       	brpl	.-10     	; 0xdf0 <__floatsisf+0x62>
     dfa:	88 0f       	add	r24, r24
     dfc:	96 95       	lsr	r25
     dfe:	87 95       	ror	r24
     e00:	97 f9       	bld	r25, 7
     e02:	08 95       	ret

00000e04 <__fp_inf>:
     e04:	97 f9       	bld	r25, 7
     e06:	9f 67       	ori	r25, 0x7F	; 127
     e08:	80 e8       	ldi	r24, 0x80	; 128
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	08 95       	ret

00000e10 <__fp_nan>:
     e10:	9f ef       	ldi	r25, 0xFF	; 255
     e12:	80 ec       	ldi	r24, 0xC0	; 192
     e14:	08 95       	ret

00000e16 <__fp_pscA>:
     e16:	00 24       	eor	r0, r0
     e18:	0a 94       	dec	r0
     e1a:	16 16       	cp	r1, r22
     e1c:	17 06       	cpc	r1, r23
     e1e:	18 06       	cpc	r1, r24
     e20:	09 06       	cpc	r0, r25
     e22:	08 95       	ret

00000e24 <__fp_pscB>:
     e24:	00 24       	eor	r0, r0
     e26:	0a 94       	dec	r0
     e28:	12 16       	cp	r1, r18
     e2a:	13 06       	cpc	r1, r19
     e2c:	14 06       	cpc	r1, r20
     e2e:	05 06       	cpc	r0, r21
     e30:	08 95       	ret

00000e32 <__fp_round>:
     e32:	09 2e       	mov	r0, r25
     e34:	03 94       	inc	r0
     e36:	00 0c       	add	r0, r0
     e38:	11 f4       	brne	.+4      	; 0xe3e <__fp_round+0xc>
     e3a:	88 23       	and	r24, r24
     e3c:	52 f0       	brmi	.+20     	; 0xe52 <__fp_round+0x20>
     e3e:	bb 0f       	add	r27, r27
     e40:	40 f4       	brcc	.+16     	; 0xe52 <__fp_round+0x20>
     e42:	bf 2b       	or	r27, r31
     e44:	11 f4       	brne	.+4      	; 0xe4a <__fp_round+0x18>
     e46:	60 ff       	sbrs	r22, 0
     e48:	04 c0       	rjmp	.+8      	; 0xe52 <__fp_round+0x20>
     e4a:	6f 5f       	subi	r22, 0xFF	; 255
     e4c:	7f 4f       	sbci	r23, 0xFF	; 255
     e4e:	8f 4f       	sbci	r24, 0xFF	; 255
     e50:	9f 4f       	sbci	r25, 0xFF	; 255
     e52:	08 95       	ret

00000e54 <__fp_split3>:
     e54:	57 fd       	sbrc	r21, 7
     e56:	90 58       	subi	r25, 0x80	; 128
     e58:	44 0f       	add	r20, r20
     e5a:	55 1f       	adc	r21, r21
     e5c:	59 f0       	breq	.+22     	; 0xe74 <__fp_splitA+0x10>
     e5e:	5f 3f       	cpi	r21, 0xFF	; 255
     e60:	71 f0       	breq	.+28     	; 0xe7e <__fp_splitA+0x1a>
     e62:	47 95       	ror	r20

00000e64 <__fp_splitA>:
     e64:	88 0f       	add	r24, r24
     e66:	97 fb       	bst	r25, 7
     e68:	99 1f       	adc	r25, r25
     e6a:	61 f0       	breq	.+24     	; 0xe84 <__fp_splitA+0x20>
     e6c:	9f 3f       	cpi	r25, 0xFF	; 255
     e6e:	79 f0       	breq	.+30     	; 0xe8e <__fp_splitA+0x2a>
     e70:	87 95       	ror	r24
     e72:	08 95       	ret
     e74:	12 16       	cp	r1, r18
     e76:	13 06       	cpc	r1, r19
     e78:	14 06       	cpc	r1, r20
     e7a:	55 1f       	adc	r21, r21
     e7c:	f2 cf       	rjmp	.-28     	; 0xe62 <__fp_split3+0xe>
     e7e:	46 95       	lsr	r20
     e80:	f1 df       	rcall	.-30     	; 0xe64 <__fp_splitA>
     e82:	08 c0       	rjmp	.+16     	; 0xe94 <__fp_splitA+0x30>
     e84:	16 16       	cp	r1, r22
     e86:	17 06       	cpc	r1, r23
     e88:	18 06       	cpc	r1, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	f1 cf       	rjmp	.-30     	; 0xe70 <__fp_splitA+0xc>
     e8e:	86 95       	lsr	r24
     e90:	71 05       	cpc	r23, r1
     e92:	61 05       	cpc	r22, r1
     e94:	08 94       	sec
     e96:	08 95       	ret

00000e98 <__fp_zero>:
     e98:	e8 94       	clt

00000e9a <__fp_szero>:
     e9a:	bb 27       	eor	r27, r27
     e9c:	66 27       	eor	r22, r22
     e9e:	77 27       	eor	r23, r23
     ea0:	cb 01       	movw	r24, r22
     ea2:	97 f9       	bld	r25, 7
     ea4:	08 95       	ret

00000ea6 <__mulsf3>:
     ea6:	0b d0       	rcall	.+22     	; 0xebe <__mulsf3x>
     ea8:	c4 cf       	rjmp	.-120    	; 0xe32 <__fp_round>
     eaa:	b5 df       	rcall	.-150    	; 0xe16 <__fp_pscA>
     eac:	28 f0       	brcs	.+10     	; 0xeb8 <__mulsf3+0x12>
     eae:	ba df       	rcall	.-140    	; 0xe24 <__fp_pscB>
     eb0:	18 f0       	brcs	.+6      	; 0xeb8 <__mulsf3+0x12>
     eb2:	95 23       	and	r25, r21
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <__mulsf3+0x12>
     eb6:	a6 cf       	rjmp	.-180    	; 0xe04 <__fp_inf>
     eb8:	ab cf       	rjmp	.-170    	; 0xe10 <__fp_nan>
     eba:	11 24       	eor	r1, r1
     ebc:	ee cf       	rjmp	.-36     	; 0xe9a <__fp_szero>

00000ebe <__mulsf3x>:
     ebe:	ca df       	rcall	.-108    	; 0xe54 <__fp_split3>
     ec0:	a0 f3       	brcs	.-24     	; 0xeaa <__mulsf3+0x4>

00000ec2 <__mulsf3_pse>:
     ec2:	95 9f       	mul	r25, r21
     ec4:	d1 f3       	breq	.-12     	; 0xeba <__mulsf3+0x14>
     ec6:	95 0f       	add	r25, r21
     ec8:	50 e0       	ldi	r21, 0x00	; 0
     eca:	55 1f       	adc	r21, r21
     ecc:	62 9f       	mul	r22, r18
     ece:	f0 01       	movw	r30, r0
     ed0:	72 9f       	mul	r23, r18
     ed2:	bb 27       	eor	r27, r27
     ed4:	f0 0d       	add	r31, r0
     ed6:	b1 1d       	adc	r27, r1
     ed8:	63 9f       	mul	r22, r19
     eda:	aa 27       	eor	r26, r26
     edc:	f0 0d       	add	r31, r0
     ede:	b1 1d       	adc	r27, r1
     ee0:	aa 1f       	adc	r26, r26
     ee2:	64 9f       	mul	r22, r20
     ee4:	66 27       	eor	r22, r22
     ee6:	b0 0d       	add	r27, r0
     ee8:	a1 1d       	adc	r26, r1
     eea:	66 1f       	adc	r22, r22
     eec:	82 9f       	mul	r24, r18
     eee:	22 27       	eor	r18, r18
     ef0:	b0 0d       	add	r27, r0
     ef2:	a1 1d       	adc	r26, r1
     ef4:	62 1f       	adc	r22, r18
     ef6:	73 9f       	mul	r23, r19
     ef8:	b0 0d       	add	r27, r0
     efa:	a1 1d       	adc	r26, r1
     efc:	62 1f       	adc	r22, r18
     efe:	83 9f       	mul	r24, r19
     f00:	a0 0d       	add	r26, r0
     f02:	61 1d       	adc	r22, r1
     f04:	22 1f       	adc	r18, r18
     f06:	74 9f       	mul	r23, r20
     f08:	33 27       	eor	r19, r19
     f0a:	a0 0d       	add	r26, r0
     f0c:	61 1d       	adc	r22, r1
     f0e:	23 1f       	adc	r18, r19
     f10:	84 9f       	mul	r24, r20
     f12:	60 0d       	add	r22, r0
     f14:	21 1d       	adc	r18, r1
     f16:	82 2f       	mov	r24, r18
     f18:	76 2f       	mov	r23, r22
     f1a:	6a 2f       	mov	r22, r26
     f1c:	11 24       	eor	r1, r1
     f1e:	9f 57       	subi	r25, 0x7F	; 127
     f20:	50 40       	sbci	r21, 0x00	; 0
     f22:	8a f0       	brmi	.+34     	; 0xf46 <__mulsf3_pse+0x84>
     f24:	e1 f0       	breq	.+56     	; 0xf5e <__mulsf3_pse+0x9c>
     f26:	88 23       	and	r24, r24
     f28:	4a f0       	brmi	.+18     	; 0xf3c <__mulsf3_pse+0x7a>
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	bb 1f       	adc	r27, r27
     f30:	66 1f       	adc	r22, r22
     f32:	77 1f       	adc	r23, r23
     f34:	88 1f       	adc	r24, r24
     f36:	91 50       	subi	r25, 0x01	; 1
     f38:	50 40       	sbci	r21, 0x00	; 0
     f3a:	a9 f7       	brne	.-22     	; 0xf26 <__mulsf3_pse+0x64>
     f3c:	9e 3f       	cpi	r25, 0xFE	; 254
     f3e:	51 05       	cpc	r21, r1
     f40:	70 f0       	brcs	.+28     	; 0xf5e <__mulsf3_pse+0x9c>
     f42:	60 cf       	rjmp	.-320    	; 0xe04 <__fp_inf>
     f44:	aa cf       	rjmp	.-172    	; 0xe9a <__fp_szero>
     f46:	5f 3f       	cpi	r21, 0xFF	; 255
     f48:	ec f3       	brlt	.-6      	; 0xf44 <__mulsf3_pse+0x82>
     f4a:	98 3e       	cpi	r25, 0xE8	; 232
     f4c:	dc f3       	brlt	.-10     	; 0xf44 <__mulsf3_pse+0x82>
     f4e:	86 95       	lsr	r24
     f50:	77 95       	ror	r23
     f52:	67 95       	ror	r22
     f54:	b7 95       	ror	r27
     f56:	f7 95       	ror	r31
     f58:	e7 95       	ror	r30
     f5a:	9f 5f       	subi	r25, 0xFF	; 255
     f5c:	c1 f7       	brne	.-16     	; 0xf4e <__mulsf3_pse+0x8c>
     f5e:	fe 2b       	or	r31, r30
     f60:	88 0f       	add	r24, r24
     f62:	91 1d       	adc	r25, r1
     f64:	96 95       	lsr	r25
     f66:	87 95       	ror	r24
     f68:	97 f9       	bld	r25, 7
     f6a:	08 95       	ret

00000f6c <pow>:
     f6c:	fa 01       	movw	r30, r20
     f6e:	ee 0f       	add	r30, r30
     f70:	ff 1f       	adc	r31, r31
     f72:	30 96       	adiw	r30, 0x00	; 0
     f74:	21 05       	cpc	r18, r1
     f76:	31 05       	cpc	r19, r1
     f78:	99 f1       	breq	.+102    	; 0xfe0 <pow+0x74>
     f7a:	61 15       	cp	r22, r1
     f7c:	71 05       	cpc	r23, r1
     f7e:	61 f4       	brne	.+24     	; 0xf98 <pow+0x2c>
     f80:	80 38       	cpi	r24, 0x80	; 128
     f82:	bf e3       	ldi	r27, 0x3F	; 63
     f84:	9b 07       	cpc	r25, r27
     f86:	49 f1       	breq	.+82     	; 0xfda <pow+0x6e>
     f88:	68 94       	set
     f8a:	90 38       	cpi	r25, 0x80	; 128
     f8c:	81 05       	cpc	r24, r1
     f8e:	61 f0       	breq	.+24     	; 0xfa8 <pow+0x3c>
     f90:	80 38       	cpi	r24, 0x80	; 128
     f92:	bf ef       	ldi	r27, 0xFF	; 255
     f94:	9b 07       	cpc	r25, r27
     f96:	41 f0       	breq	.+16     	; 0xfa8 <pow+0x3c>
     f98:	99 23       	and	r25, r25
     f9a:	42 f5       	brpl	.+80     	; 0xfec <pow+0x80>
     f9c:	ff 3f       	cpi	r31, 0xFF	; 255
     f9e:	e1 05       	cpc	r30, r1
     fa0:	31 05       	cpc	r19, r1
     fa2:	21 05       	cpc	r18, r1
     fa4:	11 f1       	breq	.+68     	; 0xfea <pow+0x7e>
     fa6:	e8 94       	clt
     fa8:	08 94       	sec
     faa:	e7 95       	ror	r30
     fac:	d9 01       	movw	r26, r18
     fae:	aa 23       	and	r26, r26
     fb0:	29 f4       	brne	.+10     	; 0xfbc <pow+0x50>
     fb2:	ab 2f       	mov	r26, r27
     fb4:	be 2f       	mov	r27, r30
     fb6:	f8 5f       	subi	r31, 0xF8	; 248
     fb8:	d0 f3       	brcs	.-12     	; 0xfae <pow+0x42>
     fba:	10 c0       	rjmp	.+32     	; 0xfdc <pow+0x70>
     fbc:	ff 5f       	subi	r31, 0xFF	; 255
     fbe:	70 f4       	brcc	.+28     	; 0xfdc <pow+0x70>
     fc0:	a6 95       	lsr	r26
     fc2:	e0 f7       	brcc	.-8      	; 0xfbc <pow+0x50>
     fc4:	f7 39       	cpi	r31, 0x97	; 151
     fc6:	50 f0       	brcs	.+20     	; 0xfdc <pow+0x70>
     fc8:	19 f0       	breq	.+6      	; 0xfd0 <pow+0x64>
     fca:	ff 3a       	cpi	r31, 0xAF	; 175
     fcc:	38 f4       	brcc	.+14     	; 0xfdc <pow+0x70>
     fce:	9f 77       	andi	r25, 0x7F	; 127
     fd0:	9f 93       	push	r25
     fd2:	0c d0       	rcall	.+24     	; 0xfec <pow+0x80>
     fd4:	0f 90       	pop	r0
     fd6:	07 fc       	sbrc	r0, 7
     fd8:	90 58       	subi	r25, 0x80	; 128
     fda:	08 95       	ret
     fdc:	3e f0       	brts	.+14     	; 0xfec <pow+0x80>
     fde:	18 cf       	rjmp	.-464    	; 0xe10 <__fp_nan>
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	80 e8       	ldi	r24, 0x80	; 128
     fe6:	9f e3       	ldi	r25, 0x3F	; 63
     fe8:	08 95       	ret
     fea:	4f e7       	ldi	r20, 0x7F	; 127
     fec:	9f 77       	andi	r25, 0x7F	; 127
     fee:	5f 93       	push	r21
     ff0:	4f 93       	push	r20
     ff2:	3f 93       	push	r19
     ff4:	2f 93       	push	r18
     ff6:	e7 d0       	rcall	.+462    	; 0x11c6 <log>
     ff8:	2f 91       	pop	r18
     ffa:	3f 91       	pop	r19
     ffc:	4f 91       	pop	r20
     ffe:	5f 91       	pop	r21
    1000:	52 df       	rcall	.-348    	; 0xea6 <__mulsf3>
    1002:	25 c0       	rjmp	.+74     	; 0x104e <exp>

00001004 <round>:
    1004:	2f df       	rcall	.-418    	; 0xe64 <__fp_splitA>
    1006:	e0 f0       	brcs	.+56     	; 0x1040 <round+0x3c>
    1008:	9e 37       	cpi	r25, 0x7E	; 126
    100a:	d8 f0       	brcs	.+54     	; 0x1042 <round+0x3e>
    100c:	96 39       	cpi	r25, 0x96	; 150
    100e:	b8 f4       	brcc	.+46     	; 0x103e <round+0x3a>
    1010:	9e 38       	cpi	r25, 0x8E	; 142
    1012:	48 f4       	brcc	.+18     	; 0x1026 <round+0x22>
    1014:	67 2f       	mov	r22, r23
    1016:	78 2f       	mov	r23, r24
    1018:	88 27       	eor	r24, r24
    101a:	98 5f       	subi	r25, 0xF8	; 248
    101c:	f9 cf       	rjmp	.-14     	; 0x1010 <round+0xc>
    101e:	86 95       	lsr	r24
    1020:	77 95       	ror	r23
    1022:	67 95       	ror	r22
    1024:	93 95       	inc	r25
    1026:	95 39       	cpi	r25, 0x95	; 149
    1028:	d0 f3       	brcs	.-12     	; 0x101e <round+0x1a>
    102a:	b6 2f       	mov	r27, r22
    102c:	b1 70       	andi	r27, 0x01	; 1
    102e:	6b 0f       	add	r22, r27
    1030:	71 1d       	adc	r23, r1
    1032:	81 1d       	adc	r24, r1
    1034:	20 f4       	brcc	.+8      	; 0x103e <round+0x3a>
    1036:	87 95       	ror	r24
    1038:	77 95       	ror	r23
    103a:	67 95       	ror	r22
    103c:	93 95       	inc	r25
    103e:	33 c0       	rjmp	.+102    	; 0x10a6 <__fp_mintl>
    1040:	4d c0       	rjmp	.+154    	; 0x10dc <__fp_mpack>
    1042:	2b cf       	rjmp	.-426    	; 0xe9a <__fp_szero>
    1044:	19 f4       	brne	.+6      	; 0x104c <round+0x48>
    1046:	0e f0       	brts	.+2      	; 0x104a <round+0x46>
    1048:	dd ce       	rjmp	.-582    	; 0xe04 <__fp_inf>
    104a:	26 cf       	rjmp	.-436    	; 0xe98 <__fp_zero>
    104c:	e1 ce       	rjmp	.-574    	; 0xe10 <__fp_nan>

0000104e <exp>:
    104e:	0a df       	rcall	.-492    	; 0xe64 <__fp_splitA>
    1050:	c8 f3       	brcs	.-14     	; 0x1044 <round+0x40>
    1052:	96 38       	cpi	r25, 0x86	; 134
    1054:	c0 f7       	brcc	.-16     	; 0x1046 <round+0x42>
    1056:	07 f8       	bld	r0, 7
    1058:	0f 92       	push	r0
    105a:	e8 94       	clt
    105c:	2b e3       	ldi	r18, 0x3B	; 59
    105e:	3a ea       	ldi	r19, 0xAA	; 170
    1060:	48 eb       	ldi	r20, 0xB8	; 184
    1062:	5f e7       	ldi	r21, 0x7F	; 127
    1064:	2e df       	rcall	.-420    	; 0xec2 <__mulsf3_pse>
    1066:	0f 92       	push	r0
    1068:	0f 92       	push	r0
    106a:	0f 92       	push	r0
    106c:	4d b7       	in	r20, 0x3d	; 61
    106e:	5e b7       	in	r21, 0x3e	; 62
    1070:	0f 92       	push	r0
    1072:	e9 d0       	rcall	.+466    	; 0x1246 <modf>
    1074:	e8 e6       	ldi	r30, 0x68	; 104
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	3f d0       	rcall	.+126    	; 0x10f8 <__fp_powser>
    107a:	4f 91       	pop	r20
    107c:	5f 91       	pop	r21
    107e:	ef 91       	pop	r30
    1080:	ff 91       	pop	r31
    1082:	e5 95       	asr	r30
    1084:	ee 1f       	adc	r30, r30
    1086:	ff 1f       	adc	r31, r31
    1088:	49 f0       	breq	.+18     	; 0x109c <exp+0x4e>
    108a:	fe 57       	subi	r31, 0x7E	; 126
    108c:	e0 68       	ori	r30, 0x80	; 128
    108e:	44 27       	eor	r20, r20
    1090:	ee 0f       	add	r30, r30
    1092:	44 1f       	adc	r20, r20
    1094:	fa 95       	dec	r31
    1096:	e1 f7       	brne	.-8      	; 0x1090 <exp+0x42>
    1098:	41 95       	neg	r20
    109a:	55 0b       	sbc	r21, r21
    109c:	5b d0       	rcall	.+182    	; 0x1154 <ldexp>
    109e:	0f 90       	pop	r0
    10a0:	07 fe       	sbrs	r0, 7
    10a2:	4f c0       	rjmp	.+158    	; 0x1142 <inverse>
    10a4:	08 95       	ret

000010a6 <__fp_mintl>:
    10a6:	88 23       	and	r24, r24
    10a8:	71 f4       	brne	.+28     	; 0x10c6 <__fp_mintl+0x20>
    10aa:	77 23       	and	r23, r23
    10ac:	21 f0       	breq	.+8      	; 0x10b6 <__fp_mintl+0x10>
    10ae:	98 50       	subi	r25, 0x08	; 8
    10b0:	87 2b       	or	r24, r23
    10b2:	76 2f       	mov	r23, r22
    10b4:	07 c0       	rjmp	.+14     	; 0x10c4 <__fp_mintl+0x1e>
    10b6:	66 23       	and	r22, r22
    10b8:	11 f4       	brne	.+4      	; 0x10be <__fp_mintl+0x18>
    10ba:	99 27       	eor	r25, r25
    10bc:	0d c0       	rjmp	.+26     	; 0x10d8 <__fp_mintl+0x32>
    10be:	90 51       	subi	r25, 0x10	; 16
    10c0:	86 2b       	or	r24, r22
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	2a f0       	brmi	.+10     	; 0x10d2 <__fp_mintl+0x2c>
    10c8:	9a 95       	dec	r25
    10ca:	66 0f       	add	r22, r22
    10cc:	77 1f       	adc	r23, r23
    10ce:	88 1f       	adc	r24, r24
    10d0:	da f7       	brpl	.-10     	; 0x10c8 <__fp_mintl+0x22>
    10d2:	88 0f       	add	r24, r24
    10d4:	96 95       	lsr	r25
    10d6:	87 95       	ror	r24
    10d8:	97 f9       	bld	r25, 7
    10da:	08 95       	ret

000010dc <__fp_mpack>:
    10dc:	9f 3f       	cpi	r25, 0xFF	; 255
    10de:	31 f0       	breq	.+12     	; 0x10ec <__fp_mpack_finite+0xc>

000010e0 <__fp_mpack_finite>:
    10e0:	91 50       	subi	r25, 0x01	; 1
    10e2:	20 f4       	brcc	.+8      	; 0x10ec <__fp_mpack_finite+0xc>
    10e4:	87 95       	ror	r24
    10e6:	77 95       	ror	r23
    10e8:	67 95       	ror	r22
    10ea:	b7 95       	ror	r27
    10ec:	88 0f       	add	r24, r24
    10ee:	91 1d       	adc	r25, r1
    10f0:	96 95       	lsr	r25
    10f2:	87 95       	ror	r24
    10f4:	97 f9       	bld	r25, 7
    10f6:	08 95       	ret

000010f8 <__fp_powser>:
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	1f 93       	push	r17
    10fe:	0f 93       	push	r16
    1100:	ff 92       	push	r15
    1102:	ef 92       	push	r14
    1104:	df 92       	push	r13
    1106:	7b 01       	movw	r14, r22
    1108:	8c 01       	movw	r16, r24
    110a:	68 94       	set
    110c:	05 c0       	rjmp	.+10     	; 0x1118 <__fp_powser+0x20>
    110e:	da 2e       	mov	r13, r26
    1110:	ef 01       	movw	r28, r30
    1112:	d5 de       	rcall	.-598    	; 0xebe <__mulsf3x>
    1114:	fe 01       	movw	r30, r28
    1116:	e8 94       	clt
    1118:	a5 91       	lpm	r26, Z+
    111a:	25 91       	lpm	r18, Z+
    111c:	35 91       	lpm	r19, Z+
    111e:	45 91       	lpm	r20, Z+
    1120:	55 91       	lpm	r21, Z+
    1122:	ae f3       	brts	.-22     	; 0x110e <__fp_powser+0x16>
    1124:	ef 01       	movw	r28, r30
    1126:	45 dd       	rcall	.-1398   	; 0xbb2 <__addsf3x>
    1128:	fe 01       	movw	r30, r28
    112a:	97 01       	movw	r18, r14
    112c:	a8 01       	movw	r20, r16
    112e:	da 94       	dec	r13
    1130:	79 f7       	brne	.-34     	; 0x1110 <__fp_powser+0x18>
    1132:	df 90       	pop	r13
    1134:	ef 90       	pop	r14
    1136:	ff 90       	pop	r15
    1138:	0f 91       	pop	r16
    113a:	1f 91       	pop	r17
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <inverse>:
    1142:	9b 01       	movw	r18, r22
    1144:	ac 01       	movw	r20, r24
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	80 e8       	ldi	r24, 0x80	; 128
    114c:	9f e3       	ldi	r25, 0x3F	; 63
    114e:	84 cd       	rjmp	.-1272   	; 0xc58 <__divsf3>
    1150:	59 ce       	rjmp	.-846    	; 0xe04 <__fp_inf>
    1152:	c4 cf       	rjmp	.-120    	; 0x10dc <__fp_mpack>

00001154 <ldexp>:
    1154:	87 de       	rcall	.-754    	; 0xe64 <__fp_splitA>
    1156:	e8 f3       	brcs	.-6      	; 0x1152 <inverse+0x10>
    1158:	99 23       	and	r25, r25
    115a:	d9 f3       	breq	.-10     	; 0x1152 <inverse+0x10>
    115c:	94 0f       	add	r25, r20
    115e:	51 1d       	adc	r21, r1
    1160:	bb f3       	brvs	.-18     	; 0x1150 <inverse+0xe>
    1162:	91 50       	subi	r25, 0x01	; 1
    1164:	50 40       	sbci	r21, 0x00	; 0
    1166:	94 f0       	brlt	.+36     	; 0x118c <ldexp+0x38>
    1168:	59 f0       	breq	.+22     	; 0x1180 <ldexp+0x2c>
    116a:	88 23       	and	r24, r24
    116c:	32 f0       	brmi	.+12     	; 0x117a <ldexp+0x26>
    116e:	66 0f       	add	r22, r22
    1170:	77 1f       	adc	r23, r23
    1172:	88 1f       	adc	r24, r24
    1174:	91 50       	subi	r25, 0x01	; 1
    1176:	50 40       	sbci	r21, 0x00	; 0
    1178:	c1 f7       	brne	.-16     	; 0x116a <ldexp+0x16>
    117a:	9e 3f       	cpi	r25, 0xFE	; 254
    117c:	51 05       	cpc	r21, r1
    117e:	44 f7       	brge	.-48     	; 0x1150 <inverse+0xe>
    1180:	88 0f       	add	r24, r24
    1182:	91 1d       	adc	r25, r1
    1184:	96 95       	lsr	r25
    1186:	87 95       	ror	r24
    1188:	97 f9       	bld	r25, 7
    118a:	08 95       	ret
    118c:	5f 3f       	cpi	r21, 0xFF	; 255
    118e:	ac f0       	brlt	.+42     	; 0x11ba <ldexp+0x66>
    1190:	98 3e       	cpi	r25, 0xE8	; 232
    1192:	9c f0       	brlt	.+38     	; 0x11ba <ldexp+0x66>
    1194:	bb 27       	eor	r27, r27
    1196:	86 95       	lsr	r24
    1198:	77 95       	ror	r23
    119a:	67 95       	ror	r22
    119c:	b7 95       	ror	r27
    119e:	08 f4       	brcc	.+2      	; 0x11a2 <ldexp+0x4e>
    11a0:	b1 60       	ori	r27, 0x01	; 1
    11a2:	93 95       	inc	r25
    11a4:	c1 f7       	brne	.-16     	; 0x1196 <ldexp+0x42>
    11a6:	bb 0f       	add	r27, r27
    11a8:	58 f7       	brcc	.-42     	; 0x1180 <ldexp+0x2c>
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <ldexp+0x5c>
    11ac:	60 ff       	sbrs	r22, 0
    11ae:	e8 cf       	rjmp	.-48     	; 0x1180 <ldexp+0x2c>
    11b0:	6f 5f       	subi	r22, 0xFF	; 255
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255
    11b4:	8f 4f       	sbci	r24, 0xFF	; 255
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	e3 cf       	rjmp	.-58     	; 0x1180 <ldexp+0x2c>
    11ba:	6f ce       	rjmp	.-802    	; 0xe9a <__fp_szero>
    11bc:	0e f0       	brts	.+2      	; 0x11c0 <ldexp+0x6c>
    11be:	8e cf       	rjmp	.-228    	; 0x10dc <__fp_mpack>
    11c0:	27 ce       	rjmp	.-946    	; 0xe10 <__fp_nan>
    11c2:	68 94       	set
    11c4:	1f ce       	rjmp	.-962    	; 0xe04 <__fp_inf>

000011c6 <log>:
    11c6:	4e de       	rcall	.-868    	; 0xe64 <__fp_splitA>
    11c8:	c8 f3       	brcs	.-14     	; 0x11bc <ldexp+0x68>
    11ca:	99 23       	and	r25, r25
    11cc:	d1 f3       	breq	.-12     	; 0x11c2 <ldexp+0x6e>
    11ce:	c6 f3       	brts	.-16     	; 0x11c0 <ldexp+0x6c>
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	1f 93       	push	r17
    11d6:	0f 93       	push	r16
    11d8:	ff 92       	push	r15
    11da:	c9 2f       	mov	r28, r25
    11dc:	dd 27       	eor	r29, r29
    11de:	88 23       	and	r24, r24
    11e0:	2a f0       	brmi	.+10     	; 0x11ec <log+0x26>
    11e2:	21 97       	sbiw	r28, 0x01	; 1
    11e4:	66 0f       	add	r22, r22
    11e6:	77 1f       	adc	r23, r23
    11e8:	88 1f       	adc	r24, r24
    11ea:	da f7       	brpl	.-10     	; 0x11e2 <log+0x1c>
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	40 e8       	ldi	r20, 0x80	; 128
    11f2:	5f eb       	ldi	r21, 0xBF	; 191
    11f4:	9f e3       	ldi	r25, 0x3F	; 63
    11f6:	88 39       	cpi	r24, 0x98	; 152
    11f8:	20 f0       	brcs	.+8      	; 0x1202 <log+0x3c>
    11fa:	80 3e       	cpi	r24, 0xE0	; 224
    11fc:	30 f0       	brcs	.+12     	; 0x120a <log+0x44>
    11fe:	21 96       	adiw	r28, 0x01	; 1
    1200:	8f 77       	andi	r24, 0x7F	; 127
    1202:	c6 dc       	rcall	.-1652   	; 0xb90 <__addsf3>
    1204:	e0 e9       	ldi	r30, 0x90	; 144
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	03 c0       	rjmp	.+6      	; 0x1210 <log+0x4a>
    120a:	c2 dc       	rcall	.-1660   	; 0xb90 <__addsf3>
    120c:	ed eb       	ldi	r30, 0xBD	; 189
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	73 df       	rcall	.-282    	; 0x10f8 <__fp_powser>
    1212:	8b 01       	movw	r16, r22
    1214:	be 01       	movw	r22, r28
    1216:	ec 01       	movw	r28, r24
    1218:	fb 2e       	mov	r15, r27
    121a:	6f 57       	subi	r22, 0x7F	; 127
    121c:	71 09       	sbc	r23, r1
    121e:	75 95       	asr	r23
    1220:	77 1f       	adc	r23, r23
    1222:	88 0b       	sbc	r24, r24
    1224:	99 0b       	sbc	r25, r25
    1226:	b3 dd       	rcall	.-1178   	; 0xd8e <__floatsisf>
    1228:	28 e1       	ldi	r18, 0x18	; 24
    122a:	32 e7       	ldi	r19, 0x72	; 114
    122c:	41 e3       	ldi	r20, 0x31	; 49
    122e:	5f e3       	ldi	r21, 0x3F	; 63
    1230:	46 de       	rcall	.-884    	; 0xebe <__mulsf3x>
    1232:	af 2d       	mov	r26, r15
    1234:	98 01       	movw	r18, r16
    1236:	ae 01       	movw	r20, r28
    1238:	ff 90       	pop	r15
    123a:	0f 91       	pop	r16
    123c:	1f 91       	pop	r17
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	b7 dc       	rcall	.-1682   	; 0xbb2 <__addsf3x>
    1244:	f6 cd       	rjmp	.-1044   	; 0xe32 <__fp_round>

00001246 <modf>:
    1246:	fa 01       	movw	r30, r20
    1248:	dc 01       	movw	r26, r24
    124a:	aa 0f       	add	r26, r26
    124c:	bb 1f       	adc	r27, r27
    124e:	9b 01       	movw	r18, r22
    1250:	ac 01       	movw	r20, r24
    1252:	bf 57       	subi	r27, 0x7F	; 127
    1254:	28 f4       	brcc	.+10     	; 0x1260 <modf+0x1a>
    1256:	22 27       	eor	r18, r18
    1258:	33 27       	eor	r19, r19
    125a:	44 27       	eor	r20, r20
    125c:	50 78       	andi	r21, 0x80	; 128
    125e:	1f c0       	rjmp	.+62     	; 0x129e <modf+0x58>
    1260:	b7 51       	subi	r27, 0x17	; 23
    1262:	88 f4       	brcc	.+34     	; 0x1286 <modf+0x40>
    1264:	ab 2f       	mov	r26, r27
    1266:	00 24       	eor	r0, r0
    1268:	46 95       	lsr	r20
    126a:	37 95       	ror	r19
    126c:	27 95       	ror	r18
    126e:	01 1c       	adc	r0, r1
    1270:	a3 95       	inc	r26
    1272:	d2 f3       	brmi	.-12     	; 0x1268 <modf+0x22>
    1274:	00 20       	and	r0, r0
    1276:	69 f0       	breq	.+26     	; 0x1292 <modf+0x4c>
    1278:	22 0f       	add	r18, r18
    127a:	33 1f       	adc	r19, r19
    127c:	44 1f       	adc	r20, r20
    127e:	b3 95       	inc	r27
    1280:	da f3       	brmi	.-10     	; 0x1278 <modf+0x32>
    1282:	0d d0       	rcall	.+26     	; 0x129e <modf+0x58>
    1284:	84 cc       	rjmp	.-1784   	; 0xb8e <__subsf3>
    1286:	61 30       	cpi	r22, 0x01	; 1
    1288:	71 05       	cpc	r23, r1
    128a:	a0 e8       	ldi	r26, 0x80	; 128
    128c:	8a 07       	cpc	r24, r26
    128e:	b9 46       	sbci	r27, 0x69	; 105
    1290:	30 f4       	brcc	.+12     	; 0x129e <modf+0x58>
    1292:	9b 01       	movw	r18, r22
    1294:	ac 01       	movw	r20, r24
    1296:	66 27       	eor	r22, r22
    1298:	77 27       	eor	r23, r23
    129a:	88 27       	eor	r24, r24
    129c:	90 78       	andi	r25, 0x80	; 128
    129e:	30 96       	adiw	r30, 0x00	; 0
    12a0:	21 f0       	breq	.+8      	; 0x12aa <modf+0x64>
    12a2:	20 83       	st	Z, r18
    12a4:	31 83       	std	Z+1, r19	; 0x01
    12a6:	42 83       	std	Z+2, r20	; 0x02
    12a8:	53 83       	std	Z+3, r21	; 0x03
    12aa:	08 95       	ret

000012ac <printf>:
    12ac:	a0 e0       	ldi	r26, 0x00	; 0
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	ec e5       	ldi	r30, 0x5C	; 92
    12b2:	f9 e0       	ldi	r31, 0x09	; 9
    12b4:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__prologue_saves__+0x20>
    12b8:	fe 01       	movw	r30, r28
    12ba:	35 96       	adiw	r30, 0x05	; 5
    12bc:	61 91       	ld	r22, Z+
    12be:	71 91       	ld	r23, Z+
    12c0:	af 01       	movw	r20, r30
    12c2:	80 91 88 01 	lds	r24, 0x0188
    12c6:	90 91 89 01 	lds	r25, 0x0189
    12ca:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <vfprintf>
    12ce:	e2 e0       	ldi	r30, 0x02	; 2
    12d0:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__epilogue_restores__+0x20>

000012d4 <vfprintf>:
    12d4:	ac e0       	ldi	r26, 0x0C	; 12
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e0 e7       	ldi	r30, 0x70	; 112
    12da:	f9 e0       	ldi	r31, 0x09	; 9
    12dc:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__prologue_saves__>
    12e0:	7c 01       	movw	r14, r24
    12e2:	6b 01       	movw	r12, r22
    12e4:	8a 01       	movw	r16, r20
    12e6:	fc 01       	movw	r30, r24
    12e8:	17 82       	std	Z+7, r1	; 0x07
    12ea:	16 82       	std	Z+6, r1	; 0x06
    12ec:	83 81       	ldd	r24, Z+3	; 0x03
    12ee:	81 ff       	sbrs	r24, 1
    12f0:	bd c1       	rjmp	.+890    	; 0x166c <vfprintf+0x398>
    12f2:	ce 01       	movw	r24, r28
    12f4:	01 96       	adiw	r24, 0x01	; 1
    12f6:	4c 01       	movw	r8, r24
    12f8:	f7 01       	movw	r30, r14
    12fa:	93 81       	ldd	r25, Z+3	; 0x03
    12fc:	f6 01       	movw	r30, r12
    12fe:	93 fd       	sbrc	r25, 3
    1300:	85 91       	lpm	r24, Z+
    1302:	93 ff       	sbrs	r25, 3
    1304:	81 91       	ld	r24, Z+
    1306:	6f 01       	movw	r12, r30
    1308:	88 23       	and	r24, r24
    130a:	09 f4       	brne	.+2      	; 0x130e <vfprintf+0x3a>
    130c:	ab c1       	rjmp	.+854    	; 0x1664 <vfprintf+0x390>
    130e:	85 32       	cpi	r24, 0x25	; 37
    1310:	39 f4       	brne	.+14     	; 0x1320 <vfprintf+0x4c>
    1312:	93 fd       	sbrc	r25, 3
    1314:	85 91       	lpm	r24, Z+
    1316:	93 ff       	sbrs	r25, 3
    1318:	81 91       	ld	r24, Z+
    131a:	6f 01       	movw	r12, r30
    131c:	85 32       	cpi	r24, 0x25	; 37
    131e:	29 f4       	brne	.+10     	; 0x132a <vfprintf+0x56>
    1320:	b7 01       	movw	r22, r14
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
    1328:	e7 cf       	rjmp	.-50     	; 0x12f8 <vfprintf+0x24>
    132a:	51 2c       	mov	r5, r1
    132c:	31 2c       	mov	r3, r1
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	20 32       	cpi	r18, 0x20	; 32
    1332:	a0 f4       	brcc	.+40     	; 0x135c <vfprintf+0x88>
    1334:	8b 32       	cpi	r24, 0x2B	; 43
    1336:	69 f0       	breq	.+26     	; 0x1352 <vfprintf+0x7e>
    1338:	30 f4       	brcc	.+12     	; 0x1346 <vfprintf+0x72>
    133a:	80 32       	cpi	r24, 0x20	; 32
    133c:	59 f0       	breq	.+22     	; 0x1354 <vfprintf+0x80>
    133e:	83 32       	cpi	r24, 0x23	; 35
    1340:	69 f4       	brne	.+26     	; 0x135c <vfprintf+0x88>
    1342:	20 61       	ori	r18, 0x10	; 16
    1344:	2c c0       	rjmp	.+88     	; 0x139e <vfprintf+0xca>
    1346:	8d 32       	cpi	r24, 0x2D	; 45
    1348:	39 f0       	breq	.+14     	; 0x1358 <vfprintf+0x84>
    134a:	80 33       	cpi	r24, 0x30	; 48
    134c:	39 f4       	brne	.+14     	; 0x135c <vfprintf+0x88>
    134e:	21 60       	ori	r18, 0x01	; 1
    1350:	26 c0       	rjmp	.+76     	; 0x139e <vfprintf+0xca>
    1352:	22 60       	ori	r18, 0x02	; 2
    1354:	24 60       	ori	r18, 0x04	; 4
    1356:	23 c0       	rjmp	.+70     	; 0x139e <vfprintf+0xca>
    1358:	28 60       	ori	r18, 0x08	; 8
    135a:	21 c0       	rjmp	.+66     	; 0x139e <vfprintf+0xca>
    135c:	27 fd       	sbrc	r18, 7
    135e:	27 c0       	rjmp	.+78     	; 0x13ae <vfprintf+0xda>
    1360:	30 ed       	ldi	r19, 0xD0	; 208
    1362:	38 0f       	add	r19, r24
    1364:	3a 30       	cpi	r19, 0x0A	; 10
    1366:	78 f4       	brcc	.+30     	; 0x1386 <vfprintf+0xb2>
    1368:	26 ff       	sbrs	r18, 6
    136a:	06 c0       	rjmp	.+12     	; 0x1378 <vfprintf+0xa4>
    136c:	fa e0       	ldi	r31, 0x0A	; 10
    136e:	5f 9e       	mul	r5, r31
    1370:	30 0d       	add	r19, r0
    1372:	11 24       	eor	r1, r1
    1374:	53 2e       	mov	r5, r19
    1376:	13 c0       	rjmp	.+38     	; 0x139e <vfprintf+0xca>
    1378:	8a e0       	ldi	r24, 0x0A	; 10
    137a:	38 9e       	mul	r3, r24
    137c:	30 0d       	add	r19, r0
    137e:	11 24       	eor	r1, r1
    1380:	33 2e       	mov	r3, r19
    1382:	20 62       	ori	r18, 0x20	; 32
    1384:	0c c0       	rjmp	.+24     	; 0x139e <vfprintf+0xca>
    1386:	8e 32       	cpi	r24, 0x2E	; 46
    1388:	21 f4       	brne	.+8      	; 0x1392 <vfprintf+0xbe>
    138a:	26 fd       	sbrc	r18, 6
    138c:	6b c1       	rjmp	.+726    	; 0x1664 <vfprintf+0x390>
    138e:	20 64       	ori	r18, 0x40	; 64
    1390:	06 c0       	rjmp	.+12     	; 0x139e <vfprintf+0xca>
    1392:	8c 36       	cpi	r24, 0x6C	; 108
    1394:	11 f4       	brne	.+4      	; 0x139a <vfprintf+0xc6>
    1396:	20 68       	ori	r18, 0x80	; 128
    1398:	02 c0       	rjmp	.+4      	; 0x139e <vfprintf+0xca>
    139a:	88 36       	cpi	r24, 0x68	; 104
    139c:	41 f4       	brne	.+16     	; 0x13ae <vfprintf+0xda>
    139e:	f6 01       	movw	r30, r12
    13a0:	93 fd       	sbrc	r25, 3
    13a2:	85 91       	lpm	r24, Z+
    13a4:	93 ff       	sbrs	r25, 3
    13a6:	81 91       	ld	r24, Z+
    13a8:	6f 01       	movw	r12, r30
    13aa:	81 11       	cpse	r24, r1
    13ac:	c1 cf       	rjmp	.-126    	; 0x1330 <vfprintf+0x5c>
    13ae:	98 2f       	mov	r25, r24
    13b0:	9f 7d       	andi	r25, 0xDF	; 223
    13b2:	95 54       	subi	r25, 0x45	; 69
    13b4:	93 30       	cpi	r25, 0x03	; 3
    13b6:	28 f4       	brcc	.+10     	; 0x13c2 <vfprintf+0xee>
    13b8:	0c 5f       	subi	r16, 0xFC	; 252
    13ba:	1f 4f       	sbci	r17, 0xFF	; 255
    13bc:	ff e3       	ldi	r31, 0x3F	; 63
    13be:	f9 83       	std	Y+1, r31	; 0x01
    13c0:	0d c0       	rjmp	.+26     	; 0x13dc <vfprintf+0x108>
    13c2:	83 36       	cpi	r24, 0x63	; 99
    13c4:	31 f0       	breq	.+12     	; 0x13d2 <vfprintf+0xfe>
    13c6:	83 37       	cpi	r24, 0x73	; 115
    13c8:	71 f0       	breq	.+28     	; 0x13e6 <vfprintf+0x112>
    13ca:	83 35       	cpi	r24, 0x53	; 83
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <vfprintf+0xfc>
    13ce:	5b c0       	rjmp	.+182    	; 0x1486 <vfprintf+0x1b2>
    13d0:	22 c0       	rjmp	.+68     	; 0x1416 <vfprintf+0x142>
    13d2:	f8 01       	movw	r30, r16
    13d4:	80 81       	ld	r24, Z
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	0e 5f       	subi	r16, 0xFE	; 254
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	44 24       	eor	r4, r4
    13de:	43 94       	inc	r4
    13e0:	51 2c       	mov	r5, r1
    13e2:	54 01       	movw	r10, r8
    13e4:	15 c0       	rjmp	.+42     	; 0x1410 <vfprintf+0x13c>
    13e6:	38 01       	movw	r6, r16
    13e8:	f2 e0       	ldi	r31, 0x02	; 2
    13ea:	6f 0e       	add	r6, r31
    13ec:	71 1c       	adc	r7, r1
    13ee:	f8 01       	movw	r30, r16
    13f0:	a0 80       	ld	r10, Z
    13f2:	b1 80       	ldd	r11, Z+1	; 0x01
    13f4:	26 ff       	sbrs	r18, 6
    13f6:	03 c0       	rjmp	.+6      	; 0x13fe <vfprintf+0x12a>
    13f8:	65 2d       	mov	r22, r5
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <vfprintf+0x12e>
    13fe:	6f ef       	ldi	r22, 0xFF	; 255
    1400:	7f ef       	ldi	r23, 0xFF	; 255
    1402:	c5 01       	movw	r24, r10
    1404:	2c 87       	std	Y+12, r18	; 0x0c
    1406:	0e 94 47 0b 	call	0x168e	; 0x168e <strnlen>
    140a:	2c 01       	movw	r4, r24
    140c:	83 01       	movw	r16, r6
    140e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1410:	2f 77       	andi	r18, 0x7F	; 127
    1412:	22 2e       	mov	r2, r18
    1414:	17 c0       	rjmp	.+46     	; 0x1444 <vfprintf+0x170>
    1416:	38 01       	movw	r6, r16
    1418:	f2 e0       	ldi	r31, 0x02	; 2
    141a:	6f 0e       	add	r6, r31
    141c:	71 1c       	adc	r7, r1
    141e:	f8 01       	movw	r30, r16
    1420:	a0 80       	ld	r10, Z
    1422:	b1 80       	ldd	r11, Z+1	; 0x01
    1424:	26 ff       	sbrs	r18, 6
    1426:	03 c0       	rjmp	.+6      	; 0x142e <vfprintf+0x15a>
    1428:	65 2d       	mov	r22, r5
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <vfprintf+0x15e>
    142e:	6f ef       	ldi	r22, 0xFF	; 255
    1430:	7f ef       	ldi	r23, 0xFF	; 255
    1432:	c5 01       	movw	r24, r10
    1434:	2c 87       	std	Y+12, r18	; 0x0c
    1436:	0e 94 3c 0b 	call	0x1678	; 0x1678 <strnlen_P>
    143a:	2c 01       	movw	r4, r24
    143c:	2c 85       	ldd	r18, Y+12	; 0x0c
    143e:	20 68       	ori	r18, 0x80	; 128
    1440:	22 2e       	mov	r2, r18
    1442:	83 01       	movw	r16, r6
    1444:	23 fc       	sbrc	r2, 3
    1446:	1b c0       	rjmp	.+54     	; 0x147e <vfprintf+0x1aa>
    1448:	83 2d       	mov	r24, r3
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	48 16       	cp	r4, r24
    144e:	59 06       	cpc	r5, r25
    1450:	b0 f4       	brcc	.+44     	; 0x147e <vfprintf+0x1aa>
    1452:	b7 01       	movw	r22, r14
    1454:	80 e2       	ldi	r24, 0x20	; 32
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
    145c:	3a 94       	dec	r3
    145e:	f4 cf       	rjmp	.-24     	; 0x1448 <vfprintf+0x174>
    1460:	f5 01       	movw	r30, r10
    1462:	27 fc       	sbrc	r2, 7
    1464:	85 91       	lpm	r24, Z+
    1466:	27 fe       	sbrs	r2, 7
    1468:	81 91       	ld	r24, Z+
    146a:	5f 01       	movw	r10, r30
    146c:	b7 01       	movw	r22, r14
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
    1474:	31 10       	cpse	r3, r1
    1476:	3a 94       	dec	r3
    1478:	f1 e0       	ldi	r31, 0x01	; 1
    147a:	4f 1a       	sub	r4, r31
    147c:	51 08       	sbc	r5, r1
    147e:	41 14       	cp	r4, r1
    1480:	51 04       	cpc	r5, r1
    1482:	71 f7       	brne	.-36     	; 0x1460 <vfprintf+0x18c>
    1484:	e5 c0       	rjmp	.+458    	; 0x1650 <vfprintf+0x37c>
    1486:	84 36       	cpi	r24, 0x64	; 100
    1488:	11 f0       	breq	.+4      	; 0x148e <vfprintf+0x1ba>
    148a:	89 36       	cpi	r24, 0x69	; 105
    148c:	39 f5       	brne	.+78     	; 0x14dc <vfprintf+0x208>
    148e:	f8 01       	movw	r30, r16
    1490:	27 ff       	sbrs	r18, 7
    1492:	07 c0       	rjmp	.+14     	; 0x14a2 <vfprintf+0x1ce>
    1494:	60 81       	ld	r22, Z
    1496:	71 81       	ldd	r23, Z+1	; 0x01
    1498:	82 81       	ldd	r24, Z+2	; 0x02
    149a:	93 81       	ldd	r25, Z+3	; 0x03
    149c:	0c 5f       	subi	r16, 0xFC	; 252
    149e:	1f 4f       	sbci	r17, 0xFF	; 255
    14a0:	08 c0       	rjmp	.+16     	; 0x14b2 <vfprintf+0x1de>
    14a2:	60 81       	ld	r22, Z
    14a4:	71 81       	ldd	r23, Z+1	; 0x01
    14a6:	88 27       	eor	r24, r24
    14a8:	77 fd       	sbrc	r23, 7
    14aa:	80 95       	com	r24
    14ac:	98 2f       	mov	r25, r24
    14ae:	0e 5f       	subi	r16, 0xFE	; 254
    14b0:	1f 4f       	sbci	r17, 0xFF	; 255
    14b2:	2f 76       	andi	r18, 0x6F	; 111
    14b4:	b2 2e       	mov	r11, r18
    14b6:	97 ff       	sbrs	r25, 7
    14b8:	09 c0       	rjmp	.+18     	; 0x14cc <vfprintf+0x1f8>
    14ba:	90 95       	com	r25
    14bc:	80 95       	com	r24
    14be:	70 95       	com	r23
    14c0:	61 95       	neg	r22
    14c2:	7f 4f       	sbci	r23, 0xFF	; 255
    14c4:	8f 4f       	sbci	r24, 0xFF	; 255
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
    14c8:	20 68       	ori	r18, 0x80	; 128
    14ca:	b2 2e       	mov	r11, r18
    14cc:	2a e0       	ldi	r18, 0x0A	; 10
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	a4 01       	movw	r20, r8
    14d2:	0e 94 84 0b 	call	0x1708	; 0x1708 <__ultoa_invert>
    14d6:	a8 2e       	mov	r10, r24
    14d8:	a8 18       	sub	r10, r8
    14da:	44 c0       	rjmp	.+136    	; 0x1564 <vfprintf+0x290>
    14dc:	85 37       	cpi	r24, 0x75	; 117
    14de:	29 f4       	brne	.+10     	; 0x14ea <vfprintf+0x216>
    14e0:	2f 7e       	andi	r18, 0xEF	; 239
    14e2:	b2 2e       	mov	r11, r18
    14e4:	2a e0       	ldi	r18, 0x0A	; 10
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	25 c0       	rjmp	.+74     	; 0x1534 <vfprintf+0x260>
    14ea:	f2 2f       	mov	r31, r18
    14ec:	f9 7f       	andi	r31, 0xF9	; 249
    14ee:	bf 2e       	mov	r11, r31
    14f0:	8f 36       	cpi	r24, 0x6F	; 111
    14f2:	c1 f0       	breq	.+48     	; 0x1524 <vfprintf+0x250>
    14f4:	18 f4       	brcc	.+6      	; 0x14fc <vfprintf+0x228>
    14f6:	88 35       	cpi	r24, 0x58	; 88
    14f8:	79 f0       	breq	.+30     	; 0x1518 <vfprintf+0x244>
    14fa:	b4 c0       	rjmp	.+360    	; 0x1664 <vfprintf+0x390>
    14fc:	80 37       	cpi	r24, 0x70	; 112
    14fe:	19 f0       	breq	.+6      	; 0x1506 <vfprintf+0x232>
    1500:	88 37       	cpi	r24, 0x78	; 120
    1502:	21 f0       	breq	.+8      	; 0x150c <vfprintf+0x238>
    1504:	af c0       	rjmp	.+350    	; 0x1664 <vfprintf+0x390>
    1506:	2f 2f       	mov	r18, r31
    1508:	20 61       	ori	r18, 0x10	; 16
    150a:	b2 2e       	mov	r11, r18
    150c:	b4 fe       	sbrs	r11, 4
    150e:	0d c0       	rjmp	.+26     	; 0x152a <vfprintf+0x256>
    1510:	8b 2d       	mov	r24, r11
    1512:	84 60       	ori	r24, 0x04	; 4
    1514:	b8 2e       	mov	r11, r24
    1516:	09 c0       	rjmp	.+18     	; 0x152a <vfprintf+0x256>
    1518:	24 ff       	sbrs	r18, 4
    151a:	0a c0       	rjmp	.+20     	; 0x1530 <vfprintf+0x25c>
    151c:	9f 2f       	mov	r25, r31
    151e:	96 60       	ori	r25, 0x06	; 6
    1520:	b9 2e       	mov	r11, r25
    1522:	06 c0       	rjmp	.+12     	; 0x1530 <vfprintf+0x25c>
    1524:	28 e0       	ldi	r18, 0x08	; 8
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	05 c0       	rjmp	.+10     	; 0x1534 <vfprintf+0x260>
    152a:	20 e1       	ldi	r18, 0x10	; 16
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <vfprintf+0x260>
    1530:	20 e1       	ldi	r18, 0x10	; 16
    1532:	32 e0       	ldi	r19, 0x02	; 2
    1534:	f8 01       	movw	r30, r16
    1536:	b7 fe       	sbrs	r11, 7
    1538:	07 c0       	rjmp	.+14     	; 0x1548 <vfprintf+0x274>
    153a:	60 81       	ld	r22, Z
    153c:	71 81       	ldd	r23, Z+1	; 0x01
    153e:	82 81       	ldd	r24, Z+2	; 0x02
    1540:	93 81       	ldd	r25, Z+3	; 0x03
    1542:	0c 5f       	subi	r16, 0xFC	; 252
    1544:	1f 4f       	sbci	r17, 0xFF	; 255
    1546:	06 c0       	rjmp	.+12     	; 0x1554 <vfprintf+0x280>
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 5f       	subi	r16, 0xFE	; 254
    1552:	1f 4f       	sbci	r17, 0xFF	; 255
    1554:	a4 01       	movw	r20, r8
    1556:	0e 94 84 0b 	call	0x1708	; 0x1708 <__ultoa_invert>
    155a:	a8 2e       	mov	r10, r24
    155c:	a8 18       	sub	r10, r8
    155e:	fb 2d       	mov	r31, r11
    1560:	ff 77       	andi	r31, 0x7F	; 127
    1562:	bf 2e       	mov	r11, r31
    1564:	b6 fe       	sbrs	r11, 6
    1566:	0b c0       	rjmp	.+22     	; 0x157e <vfprintf+0x2aa>
    1568:	2b 2d       	mov	r18, r11
    156a:	2e 7f       	andi	r18, 0xFE	; 254
    156c:	a5 14       	cp	r10, r5
    156e:	50 f4       	brcc	.+20     	; 0x1584 <vfprintf+0x2b0>
    1570:	b4 fe       	sbrs	r11, 4
    1572:	0a c0       	rjmp	.+20     	; 0x1588 <vfprintf+0x2b4>
    1574:	b2 fc       	sbrc	r11, 2
    1576:	08 c0       	rjmp	.+16     	; 0x1588 <vfprintf+0x2b4>
    1578:	2b 2d       	mov	r18, r11
    157a:	2e 7e       	andi	r18, 0xEE	; 238
    157c:	05 c0       	rjmp	.+10     	; 0x1588 <vfprintf+0x2b4>
    157e:	7a 2c       	mov	r7, r10
    1580:	2b 2d       	mov	r18, r11
    1582:	03 c0       	rjmp	.+6      	; 0x158a <vfprintf+0x2b6>
    1584:	7a 2c       	mov	r7, r10
    1586:	01 c0       	rjmp	.+2      	; 0x158a <vfprintf+0x2b6>
    1588:	75 2c       	mov	r7, r5
    158a:	24 ff       	sbrs	r18, 4
    158c:	0d c0       	rjmp	.+26     	; 0x15a8 <vfprintf+0x2d4>
    158e:	fe 01       	movw	r30, r28
    1590:	ea 0d       	add	r30, r10
    1592:	f1 1d       	adc	r31, r1
    1594:	80 81       	ld	r24, Z
    1596:	80 33       	cpi	r24, 0x30	; 48
    1598:	11 f4       	brne	.+4      	; 0x159e <vfprintf+0x2ca>
    159a:	29 7e       	andi	r18, 0xE9	; 233
    159c:	09 c0       	rjmp	.+18     	; 0x15b0 <vfprintf+0x2dc>
    159e:	22 ff       	sbrs	r18, 2
    15a0:	06 c0       	rjmp	.+12     	; 0x15ae <vfprintf+0x2da>
    15a2:	73 94       	inc	r7
    15a4:	73 94       	inc	r7
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <vfprintf+0x2dc>
    15a8:	82 2f       	mov	r24, r18
    15aa:	86 78       	andi	r24, 0x86	; 134
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <vfprintf+0x2dc>
    15ae:	73 94       	inc	r7
    15b0:	23 fd       	sbrc	r18, 3
    15b2:	13 c0       	rjmp	.+38     	; 0x15da <vfprintf+0x306>
    15b4:	20 ff       	sbrs	r18, 0
    15b6:	06 c0       	rjmp	.+12     	; 0x15c4 <vfprintf+0x2f0>
    15b8:	5a 2c       	mov	r5, r10
    15ba:	73 14       	cp	r7, r3
    15bc:	18 f4       	brcc	.+6      	; 0x15c4 <vfprintf+0x2f0>
    15be:	53 0c       	add	r5, r3
    15c0:	57 18       	sub	r5, r7
    15c2:	73 2c       	mov	r7, r3
    15c4:	73 14       	cp	r7, r3
    15c6:	68 f4       	brcc	.+26     	; 0x15e2 <vfprintf+0x30e>
    15c8:	b7 01       	movw	r22, r14
    15ca:	80 e2       	ldi	r24, 0x20	; 32
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	2c 87       	std	Y+12, r18	; 0x0c
    15d0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
    15d4:	73 94       	inc	r7
    15d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    15d8:	f5 cf       	rjmp	.-22     	; 0x15c4 <vfprintf+0x2f0>
    15da:	73 14       	cp	r7, r3
    15dc:	10 f4       	brcc	.+4      	; 0x15e2 <vfprintf+0x30e>
    15de:	37 18       	sub	r3, r7
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <vfprintf+0x310>
    15e2:	31 2c       	mov	r3, r1
    15e4:	24 ff       	sbrs	r18, 4
    15e6:	12 c0       	rjmp	.+36     	; 0x160c <vfprintf+0x338>
    15e8:	b7 01       	movw	r22, r14
    15ea:	80 e3       	ldi	r24, 0x30	; 48
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	2c 87       	std	Y+12, r18	; 0x0c
    15f0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
    15f4:	2c 85       	ldd	r18, Y+12	; 0x0c
    15f6:	22 ff       	sbrs	r18, 2
    15f8:	17 c0       	rjmp	.+46     	; 0x1628 <vfprintf+0x354>
    15fa:	21 ff       	sbrs	r18, 1
    15fc:	03 c0       	rjmp	.+6      	; 0x1604 <vfprintf+0x330>
    15fe:	88 e5       	ldi	r24, 0x58	; 88
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <vfprintf+0x334>
    1604:	88 e7       	ldi	r24, 0x78	; 120
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	b7 01       	movw	r22, r14
    160a:	0c c0       	rjmp	.+24     	; 0x1624 <vfprintf+0x350>
    160c:	82 2f       	mov	r24, r18
    160e:	86 78       	andi	r24, 0x86	; 134
    1610:	59 f0       	breq	.+22     	; 0x1628 <vfprintf+0x354>
    1612:	21 fd       	sbrc	r18, 1
    1614:	02 c0       	rjmp	.+4      	; 0x161a <vfprintf+0x346>
    1616:	80 e2       	ldi	r24, 0x20	; 32
    1618:	01 c0       	rjmp	.+2      	; 0x161c <vfprintf+0x348>
    161a:	8b e2       	ldi	r24, 0x2B	; 43
    161c:	27 fd       	sbrc	r18, 7
    161e:	8d e2       	ldi	r24, 0x2D	; 45
    1620:	b7 01       	movw	r22, r14
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
    1628:	a5 14       	cp	r10, r5
    162a:	38 f4       	brcc	.+14     	; 0x163a <vfprintf+0x366>
    162c:	b7 01       	movw	r22, r14
    162e:	80 e3       	ldi	r24, 0x30	; 48
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
    1636:	5a 94       	dec	r5
    1638:	f7 cf       	rjmp	.-18     	; 0x1628 <vfprintf+0x354>
    163a:	aa 94       	dec	r10
    163c:	f4 01       	movw	r30, r8
    163e:	ea 0d       	add	r30, r10
    1640:	f1 1d       	adc	r31, r1
    1642:	80 81       	ld	r24, Z
    1644:	b7 01       	movw	r22, r14
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
    164c:	a1 10       	cpse	r10, r1
    164e:	f5 cf       	rjmp	.-22     	; 0x163a <vfprintf+0x366>
    1650:	33 20       	and	r3, r3
    1652:	09 f4       	brne	.+2      	; 0x1656 <vfprintf+0x382>
    1654:	51 ce       	rjmp	.-862    	; 0x12f8 <vfprintf+0x24>
    1656:	b7 01       	movw	r22, r14
    1658:	80 e2       	ldi	r24, 0x20	; 32
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <fputc>
    1660:	3a 94       	dec	r3
    1662:	f6 cf       	rjmp	.-20     	; 0x1650 <vfprintf+0x37c>
    1664:	f7 01       	movw	r30, r14
    1666:	86 81       	ldd	r24, Z+6	; 0x06
    1668:	97 81       	ldd	r25, Z+7	; 0x07
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <vfprintf+0x39c>
    166c:	8f ef       	ldi	r24, 0xFF	; 255
    166e:	9f ef       	ldi	r25, 0xFF	; 255
    1670:	2c 96       	adiw	r28, 0x0c	; 12
    1672:	e2 e1       	ldi	r30, 0x12	; 18
    1674:	0c 94 fe 0b 	jmp	0x17fc	; 0x17fc <__epilogue_restores__>

00001678 <strnlen_P>:
    1678:	fc 01       	movw	r30, r24
    167a:	05 90       	lpm	r0, Z+
    167c:	61 50       	subi	r22, 0x01	; 1
    167e:	70 40       	sbci	r23, 0x00	; 0
    1680:	01 10       	cpse	r0, r1
    1682:	d8 f7       	brcc	.-10     	; 0x167a <strnlen_P+0x2>
    1684:	80 95       	com	r24
    1686:	90 95       	com	r25
    1688:	8e 0f       	add	r24, r30
    168a:	9f 1f       	adc	r25, r31
    168c:	08 95       	ret

0000168e <strnlen>:
    168e:	fc 01       	movw	r30, r24
    1690:	61 50       	subi	r22, 0x01	; 1
    1692:	70 40       	sbci	r23, 0x00	; 0
    1694:	01 90       	ld	r0, Z+
    1696:	01 10       	cpse	r0, r1
    1698:	d8 f7       	brcc	.-10     	; 0x1690 <strnlen+0x2>
    169a:	80 95       	com	r24
    169c:	90 95       	com	r25
    169e:	8e 0f       	add	r24, r30
    16a0:	9f 1f       	adc	r25, r31
    16a2:	08 95       	ret

000016a4 <fputc>:
    16a4:	0f 93       	push	r16
    16a6:	1f 93       	push	r17
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	18 2f       	mov	r17, r24
    16ae:	09 2f       	mov	r16, r25
    16b0:	eb 01       	movw	r28, r22
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	81 fd       	sbrc	r24, 1
    16b6:	03 c0       	rjmp	.+6      	; 0x16be <fputc+0x1a>
    16b8:	8f ef       	ldi	r24, 0xFF	; 255
    16ba:	9f ef       	ldi	r25, 0xFF	; 255
    16bc:	20 c0       	rjmp	.+64     	; 0x16fe <fputc+0x5a>
    16be:	82 ff       	sbrs	r24, 2
    16c0:	10 c0       	rjmp	.+32     	; 0x16e2 <fputc+0x3e>
    16c2:	4e 81       	ldd	r20, Y+6	; 0x06
    16c4:	5f 81       	ldd	r21, Y+7	; 0x07
    16c6:	2c 81       	ldd	r18, Y+4	; 0x04
    16c8:	3d 81       	ldd	r19, Y+5	; 0x05
    16ca:	42 17       	cp	r20, r18
    16cc:	53 07       	cpc	r21, r19
    16ce:	7c f4       	brge	.+30     	; 0x16ee <fputc+0x4a>
    16d0:	e8 81       	ld	r30, Y
    16d2:	f9 81       	ldd	r31, Y+1	; 0x01
    16d4:	9f 01       	movw	r18, r30
    16d6:	2f 5f       	subi	r18, 0xFF	; 255
    16d8:	3f 4f       	sbci	r19, 0xFF	; 255
    16da:	39 83       	std	Y+1, r19	; 0x01
    16dc:	28 83       	st	Y, r18
    16de:	10 83       	st	Z, r17
    16e0:	06 c0       	rjmp	.+12     	; 0x16ee <fputc+0x4a>
    16e2:	e8 85       	ldd	r30, Y+8	; 0x08
    16e4:	f9 85       	ldd	r31, Y+9	; 0x09
    16e6:	81 2f       	mov	r24, r17
    16e8:	09 95       	icall
    16ea:	89 2b       	or	r24, r25
    16ec:	29 f7       	brne	.-54     	; 0x16b8 <fputc+0x14>
    16ee:	2e 81       	ldd	r18, Y+6	; 0x06
    16f0:	3f 81       	ldd	r19, Y+7	; 0x07
    16f2:	2f 5f       	subi	r18, 0xFF	; 255
    16f4:	3f 4f       	sbci	r19, 0xFF	; 255
    16f6:	3f 83       	std	Y+7, r19	; 0x07
    16f8:	2e 83       	std	Y+6, r18	; 0x06
    16fa:	81 2f       	mov	r24, r17
    16fc:	90 2f       	mov	r25, r16
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	08 95       	ret

00001708 <__ultoa_invert>:
    1708:	fa 01       	movw	r30, r20
    170a:	aa 27       	eor	r26, r26
    170c:	28 30       	cpi	r18, 0x08	; 8
    170e:	51 f1       	breq	.+84     	; 0x1764 <__ultoa_invert+0x5c>
    1710:	20 31       	cpi	r18, 0x10	; 16
    1712:	81 f1       	breq	.+96     	; 0x1774 <__ultoa_invert+0x6c>
    1714:	e8 94       	clt
    1716:	6f 93       	push	r22
    1718:	6e 7f       	andi	r22, 0xFE	; 254
    171a:	6e 5f       	subi	r22, 0xFE	; 254
    171c:	7f 4f       	sbci	r23, 0xFF	; 255
    171e:	8f 4f       	sbci	r24, 0xFF	; 255
    1720:	9f 4f       	sbci	r25, 0xFF	; 255
    1722:	af 4f       	sbci	r26, 0xFF	; 255
    1724:	b1 e0       	ldi	r27, 0x01	; 1
    1726:	3e d0       	rcall	.+124    	; 0x17a4 <__ultoa_invert+0x9c>
    1728:	b4 e0       	ldi	r27, 0x04	; 4
    172a:	3c d0       	rcall	.+120    	; 0x17a4 <__ultoa_invert+0x9c>
    172c:	67 0f       	add	r22, r23
    172e:	78 1f       	adc	r23, r24
    1730:	89 1f       	adc	r24, r25
    1732:	9a 1f       	adc	r25, r26
    1734:	a1 1d       	adc	r26, r1
    1736:	68 0f       	add	r22, r24
    1738:	79 1f       	adc	r23, r25
    173a:	8a 1f       	adc	r24, r26
    173c:	91 1d       	adc	r25, r1
    173e:	a1 1d       	adc	r26, r1
    1740:	6a 0f       	add	r22, r26
    1742:	71 1d       	adc	r23, r1
    1744:	81 1d       	adc	r24, r1
    1746:	91 1d       	adc	r25, r1
    1748:	a1 1d       	adc	r26, r1
    174a:	20 d0       	rcall	.+64     	; 0x178c <__ultoa_invert+0x84>
    174c:	09 f4       	brne	.+2      	; 0x1750 <__ultoa_invert+0x48>
    174e:	68 94       	set
    1750:	3f 91       	pop	r19
    1752:	2a e0       	ldi	r18, 0x0A	; 10
    1754:	26 9f       	mul	r18, r22
    1756:	11 24       	eor	r1, r1
    1758:	30 19       	sub	r19, r0
    175a:	30 5d       	subi	r19, 0xD0	; 208
    175c:	31 93       	st	Z+, r19
    175e:	de f6       	brtc	.-74     	; 0x1716 <__ultoa_invert+0xe>
    1760:	cf 01       	movw	r24, r30
    1762:	08 95       	ret
    1764:	46 2f       	mov	r20, r22
    1766:	47 70       	andi	r20, 0x07	; 7
    1768:	40 5d       	subi	r20, 0xD0	; 208
    176a:	41 93       	st	Z+, r20
    176c:	b3 e0       	ldi	r27, 0x03	; 3
    176e:	0f d0       	rcall	.+30     	; 0x178e <__ultoa_invert+0x86>
    1770:	c9 f7       	brne	.-14     	; 0x1764 <__ultoa_invert+0x5c>
    1772:	f6 cf       	rjmp	.-20     	; 0x1760 <__ultoa_invert+0x58>
    1774:	46 2f       	mov	r20, r22
    1776:	4f 70       	andi	r20, 0x0F	; 15
    1778:	40 5d       	subi	r20, 0xD0	; 208
    177a:	4a 33       	cpi	r20, 0x3A	; 58
    177c:	18 f0       	brcs	.+6      	; 0x1784 <__ultoa_invert+0x7c>
    177e:	49 5d       	subi	r20, 0xD9	; 217
    1780:	31 fd       	sbrc	r19, 1
    1782:	40 52       	subi	r20, 0x20	; 32
    1784:	41 93       	st	Z+, r20
    1786:	02 d0       	rcall	.+4      	; 0x178c <__ultoa_invert+0x84>
    1788:	a9 f7       	brne	.-22     	; 0x1774 <__ultoa_invert+0x6c>
    178a:	ea cf       	rjmp	.-44     	; 0x1760 <__ultoa_invert+0x58>
    178c:	b4 e0       	ldi	r27, 0x04	; 4
    178e:	a6 95       	lsr	r26
    1790:	97 95       	ror	r25
    1792:	87 95       	ror	r24
    1794:	77 95       	ror	r23
    1796:	67 95       	ror	r22
    1798:	ba 95       	dec	r27
    179a:	c9 f7       	brne	.-14     	; 0x178e <__ultoa_invert+0x86>
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	61 05       	cpc	r22, r1
    17a0:	71 05       	cpc	r23, r1
    17a2:	08 95       	ret
    17a4:	9b 01       	movw	r18, r22
    17a6:	ac 01       	movw	r20, r24
    17a8:	0a 2e       	mov	r0, r26
    17aa:	06 94       	lsr	r0
    17ac:	57 95       	ror	r21
    17ae:	47 95       	ror	r20
    17b0:	37 95       	ror	r19
    17b2:	27 95       	ror	r18
    17b4:	ba 95       	dec	r27
    17b6:	c9 f7       	brne	.-14     	; 0x17aa <__ultoa_invert+0xa2>
    17b8:	62 0f       	add	r22, r18
    17ba:	73 1f       	adc	r23, r19
    17bc:	84 1f       	adc	r24, r20
    17be:	95 1f       	adc	r25, r21
    17c0:	a0 1d       	adc	r26, r0
    17c2:	08 95       	ret

000017c4 <__prologue_saves__>:
    17c4:	2f 92       	push	r2
    17c6:	3f 92       	push	r3
    17c8:	4f 92       	push	r4
    17ca:	5f 92       	push	r5
    17cc:	6f 92       	push	r6
    17ce:	7f 92       	push	r7
    17d0:	8f 92       	push	r8
    17d2:	9f 92       	push	r9
    17d4:	af 92       	push	r10
    17d6:	bf 92       	push	r11
    17d8:	cf 92       	push	r12
    17da:	df 92       	push	r13
    17dc:	ef 92       	push	r14
    17de:	ff 92       	push	r15
    17e0:	0f 93       	push	r16
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	ca 1b       	sub	r28, r26
    17ee:	db 0b       	sbc	r29, r27
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	f8 94       	cli
    17f4:	de bf       	out	0x3e, r29	; 62
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	cd bf       	out	0x3d, r28	; 61
    17fa:	09 94       	ijmp

000017fc <__epilogue_restores__>:
    17fc:	2a 88       	ldd	r2, Y+18	; 0x12
    17fe:	39 88       	ldd	r3, Y+17	; 0x11
    1800:	48 88       	ldd	r4, Y+16	; 0x10
    1802:	5f 84       	ldd	r5, Y+15	; 0x0f
    1804:	6e 84       	ldd	r6, Y+14	; 0x0e
    1806:	7d 84       	ldd	r7, Y+13	; 0x0d
    1808:	8c 84       	ldd	r8, Y+12	; 0x0c
    180a:	9b 84       	ldd	r9, Y+11	; 0x0b
    180c:	aa 84       	ldd	r10, Y+10	; 0x0a
    180e:	b9 84       	ldd	r11, Y+9	; 0x09
    1810:	c8 84       	ldd	r12, Y+8	; 0x08
    1812:	df 80       	ldd	r13, Y+7	; 0x07
    1814:	ee 80       	ldd	r14, Y+6	; 0x06
    1816:	fd 80       	ldd	r15, Y+5	; 0x05
    1818:	0c 81       	ldd	r16, Y+4	; 0x04
    181a:	1b 81       	ldd	r17, Y+3	; 0x03
    181c:	aa 81       	ldd	r26, Y+2	; 0x02
    181e:	b9 81       	ldd	r27, Y+1	; 0x01
    1820:	ce 0f       	add	r28, r30
    1822:	d1 1d       	adc	r29, r1
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	ed 01       	movw	r28, r26
    1830:	08 95       	ret

00001832 <_exit>:
    1832:	f8 94       	cli

00001834 <__stop_program>:
    1834:	ff cf       	rjmp	.-2      	; 0x1834 <__stop_program>
